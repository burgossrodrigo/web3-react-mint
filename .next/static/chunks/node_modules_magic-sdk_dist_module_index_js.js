(self["webpackChunk_N_E"] = self["webpackChunk_N_E"] || []).push([["node_modules_magic-sdk_dist_module_index_js"],{

/***/ "./node_modules/@magic-sdk/provider/dist/module/core/json-rpc.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/core/json-rpc.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "standardizeJsonRpcRequestPayload": function() { return /* binding */ standardizeJsonRpcRequestPayload; },
/* harmony export */   "createJsonRpcRequestPayload": function() { return /* binding */ createJsonRpcRequestPayload; },
/* harmony export */   "JsonRpcResponse": function() { return /* binding */ JsonRpcResponse; }
/* harmony export */ });
/* harmony import */ var _util_type_guards__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../util/type-guards */ "./node_modules/@magic-sdk/provider/dist/module/util/type-guards.js");
/* harmony import */ var _util_get_payload_id__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/get-payload-id */ "./node_modules/@magic-sdk/provider/dist/module/util/get-payload-id.js");
/* eslint-disable no-underscore-dangle, no-param-reassign */


var payloadPreprocessedSymbol = Symbol('Payload pre-processed by Magic SDK');
/**
 * To avoid "pre-processing" a payload more than once (and needlessly
 * incrementing our payload ID generator), we attach a symbol to detect a
 * payloads we've already visited.
 */
function markPayloadAsPreprocessed(payload) {
    Object.defineProperty(payload, payloadPreprocessedSymbol, {
        value: true,
        enumerable: false,
    });
    return payload;
}
/**
 * Returns `true` if the payload has been visited by our "pre-processing," in
 * `standardizeJsonRpcRequestPayload(...)`.
 */
function isPayloadPreprocessed(payload) {
    return !!payload[payloadPreprocessedSymbol];
}
/**
 * Returns a full `JsonRpcRequestPayload` from a potentially incomplete payload
 * object. This method mutates the given `payload` to preserve compatibility
 * with external libraries that perform their own `JsonRpcRequestPayload.id`
 * check to associate responses (such as `web3`).
 *
 * This function is no-op if the payload has already been processed before.
 */
function standardizeJsonRpcRequestPayload(payload) {
    var _a, _b, _c;
    if (!isPayloadPreprocessed(payload)) {
        payload.jsonrpc = (_a = payload.jsonrpc) !== null && _a !== void 0 ? _a : '2.0';
        payload.id = (0,_util_get_payload_id__WEBPACK_IMPORTED_MODULE_1__.getPayloadId)();
        payload.method = (_b = payload.method) !== null && _b !== void 0 ? _b : 'noop';
        payload.params = (_c = payload.params) !== null && _c !== void 0 ? _c : [];
        markPayloadAsPreprocessed(payload);
    }
    return payload;
}
/**
 * Build a valid JSON RPC payload for emitting to the Magic SDK iframe relayer.
 */
function createJsonRpcRequestPayload(method, params) {
    if (params === void 0) { params = []; }
    return markPayloadAsPreprocessed({
        params: params,
        method: method,
        jsonrpc: '2.0',
        id: (0,_util_get_payload_id__WEBPACK_IMPORTED_MODULE_1__.getPayloadId)(),
    });
}
/**
 * Formats and standardizes a JSON RPC 2.0 response from a number of potential
 * sources.
 */
var JsonRpcResponse = /** @class */ (function () {
    function JsonRpcResponse(responseOrPayload) {
        if (responseOrPayload instanceof JsonRpcResponse) {
            this._jsonrpc = responseOrPayload.payload.jsonrpc;
            this._id = responseOrPayload.payload.id;
            this._result = responseOrPayload.payload.result;
            this._error = responseOrPayload.payload.error;
        }
        else if ((0,_util_type_guards__WEBPACK_IMPORTED_MODULE_0__.isJsonRpcResponsePayload)(responseOrPayload)) {
            this._jsonrpc = responseOrPayload.jsonrpc;
            this._id = responseOrPayload.id;
            this._result = responseOrPayload.result;
            this._error = responseOrPayload.error;
        }
        else {
            this._jsonrpc = responseOrPayload.jsonrpc;
            this._id = responseOrPayload.id;
            this._result = undefined;
            this._error = undefined;
        }
    }
    JsonRpcResponse.prototype.applyError = function (error) {
        this._error = error;
        return this;
    };
    JsonRpcResponse.prototype.applyResult = function (result) {
        this._result = result;
        return this;
    };
    Object.defineProperty(JsonRpcResponse.prototype, "hasError", {
        get: function () {
            return typeof this._error !== 'undefined' && this._error !== null;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonRpcResponse.prototype, "hasResult", {
        get: function () {
            return typeof this._result !== 'undefined';
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(JsonRpcResponse.prototype, "payload", {
        get: function () {
            return {
                jsonrpc: this._jsonrpc,
                id: this._id,
                result: this._result,
                error: this._error,
            };
        },
        enumerable: true,
        configurable: true
    });
    return JsonRpcResponse;
}());

//# sourceMappingURL=json-rpc.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/core/payload-transport.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/core/payload-transport.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "PayloadTransport": function() { return /* binding */ PayloadTransport; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");
/* harmony import */ var _json_rpc__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./json-rpc */ "./node_modules/@magic-sdk/provider/dist/module/core/json-rpc.js");
/* harmony import */ var _util_promise_tools__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../util/promise-tools */ "./node_modules/@magic-sdk/provider/dist/module/util/promise-tools.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};



/**
 * Get the originating payload from a batch request using the specified `id`.
 */
function getRequestPayloadFromBatch(requestPayload, id) {
    return id && Array.isArray(requestPayload)
        ? requestPayload.find(function (p) { return p.id === id; })
        : requestPayload;
}
/**
 * Ensures the incoming response follows the expected schema and parses for a
 * JSON RPC payload ID.
 */
function standardizeResponse(requestPayload, event) {
    var _a;
    var id = (_a = event.data.response) === null || _a === void 0 ? void 0 : _a.id;
    var requestPayloadResolved = getRequestPayloadFromBatch(requestPayload, id);
    if (id && requestPayloadResolved) {
        // Build a standardized response object
        var response = new _json_rpc__WEBPACK_IMPORTED_MODULE_1__.JsonRpcResponse(requestPayloadResolved)
            .applyResult(event.data.response.result)
            .applyError(event.data.response.error);
        return { id: id, response: response };
    }
    return {};
}
var PayloadTransport = /** @class */ (function () {
    /**
     * Create an instance of `PayloadTransport`
     *
     * @param overlay - The `IframeController` context to which the event will be
     * posted.
     * @param endpoint - The URL for the relevant iframe context.
     * @param encodedQueryParams - The unique, encoded query parameters for the
     * relevant iframe context.
     */
    function PayloadTransport(endpoint, encodedQueryParams) {
        this.endpoint = endpoint;
        this.encodedQueryParams = encodedQueryParams;
        this.messageHandlers = new Set();
        this.init();
    }
    PayloadTransport.prototype.post = function (overlay, msgType, payload) {
        return __awaiter(this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                return [2 /*return*/, (0,_util_promise_tools__WEBPACK_IMPORTED_MODULE_2__.createAutoCatchingPromise)(function (resolve) { return __awaiter(_this, void 0, void 0, function () {
                        var batchData, batchIds, acknowledgeResponse, removeResponseListener;
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, overlay.ready];
                                case 1:
                                    _a.sent();
                                    batchData = [];
                                    batchIds = Array.isArray(payload) ? payload.map(function (p) { return p.id; }) : [];
                                    return [4 /*yield*/, overlay.postMessage({ msgType: msgType + "-" + this.encodedQueryParams, payload: payload })];
                                case 2:
                                    _a.sent();
                                    acknowledgeResponse = function (removeEventListener) { return function (event) {
                                        var _a = standardizeResponse(payload, event), id = _a.id, response = _a.response;
                                        if (id && response && Array.isArray(payload) && batchIds.includes(id)) {
                                            batchData.push(response);
                                            // For batch requests, we wait for all responses before resolving.
                                            if (batchData.length === payload.length) {
                                                removeEventListener();
                                                resolve(batchData);
                                            }
                                        }
                                        else if (id && response && !Array.isArray(payload) && id === payload.id) {
                                            removeEventListener();
                                            resolve(response);
                                        }
                                    }; };
                                    removeResponseListener = this.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_HANDLE_RESPONSE, acknowledgeResponse(function () { return removeResponseListener(); }));
                                    return [2 /*return*/];
                            }
                        });
                    }); })];
            });
        });
    };
    /**
     * Listen for events received with the given `msgType`.
     *
     * @param msgType - The `msgType` encoded with the event data.
     * @param handler - A handler function to execute on each event received.
     * @return A `void` function to remove the attached event.
     */
    PayloadTransport.prototype.on = function (msgType, handler) {
        var _this = this;
        var boundHandler = handler.bind(window);
        // We cannot effectively cover this function because it never gets reference
        // by value. The functionality of this callback is tested within
        // `initMessageListener`.
        /* istanbul ignore next */
        var listener = function (event) {
            if (event.data.msgType === msgType + "-" + _this.encodedQueryParams)
                boundHandler(event);
        };
        this.messageHandlers.add(listener);
        return function () { return _this.messageHandlers.delete(listener); };
    };
    return PayloadTransport;
}());

//# sourceMappingURL=payload-transport.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-environment.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/core/sdk-environment.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SDKEnvironment": function() { return /* binding */ SDKEnvironment; },
/* harmony export */   "createSDK": function() { return /* binding */ createSDK; },
/* harmony export */   "envNameToNpmName": function() { return /* binding */ envNameToNpmName; }
/* harmony export */ });
var SDKEnvironment = {};
function createSDK(SDKBaseCtor, environment) {
    Object.assign(SDKEnvironment, environment);
    return SDKBaseCtor;
}
var envNameToNpmName = {
    'magic-sdk': 'magic-sdk',
    'magic-sdk-rn': '@magic-sdk/react-native',
};
//# sourceMappingURL=sdk-environment.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MagicSDKError": function() { return /* binding */ MagicSDKError; },
/* harmony export */   "MagicRPCError": function() { return /* binding */ MagicRPCError; },
/* harmony export */   "MagicSDKWarning": function() { return /* binding */ MagicSDKWarning; },
/* harmony export */   "MagicExtensionError": function() { return /* binding */ MagicExtensionError; },
/* harmony export */   "MagicExtensionWarning": function() { return /* binding */ MagicExtensionWarning; },
/* harmony export */   "createMissingApiKeyError": function() { return /* binding */ createMissingApiKeyError; },
/* harmony export */   "createModalNotReadyError": function() { return /* binding */ createModalNotReadyError; },
/* harmony export */   "createMalformedResponseError": function() { return /* binding */ createMalformedResponseError; },
/* harmony export */   "createExtensionNotInitializedError": function() { return /* binding */ createExtensionNotInitializedError; },
/* harmony export */   "createWebAuthnNotSupportError": function() { return /* binding */ createWebAuthnNotSupportError; },
/* harmony export */   "createWebAuthCreateCredentialError": function() { return /* binding */ createWebAuthCreateCredentialError; },
/* harmony export */   "createIncompatibleExtensionsError": function() { return /* binding */ createIncompatibleExtensionsError; },
/* harmony export */   "createInvalidArgumentError": function() { return /* binding */ createInvalidArgumentError; },
/* harmony export */   "createDuplicateIframeWarning": function() { return /* binding */ createDuplicateIframeWarning; },
/* harmony export */   "createSynchronousWeb3MethodWarning": function() { return /* binding */ createSynchronousWeb3MethodWarning; },
/* harmony export */   "createReactNativeEndpointConfigurationWarning": function() { return /* binding */ createReactNativeEndpointConfigurationWarning; },
/* harmony export */   "createDeprecationWarning": function() { return /* binding */ createDeprecationWarning; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");
/* harmony import */ var _util_type_guards__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/type-guards */ "./node_modules/@magic-sdk/provider/dist/module/util/type-guards.js");
/* harmony import */ var _sdk_environment__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdk-environment */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-environment.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();



// --- Error/warning classes
/**
 * This error type represents internal SDK errors. This could be developer
 * mistakes (or Magic's mistakes), or execution errors unrelated to standard
 * JavaScript exceptions.
 */
var MagicSDKError = /** @class */ (function (_super) {
    __extends(MagicSDKError, _super);
    function MagicSDKError(code, rawMessage) {
        var _this = _super.call(this, "Magic SDK Error: [" + code + "] " + rawMessage) || this;
        _this.code = code;
        _this.rawMessage = rawMessage;
        _this.__proto__ = Error;
        Object.setPrototypeOf(_this, MagicSDKError.prototype);
        return _this;
    }
    return MagicSDKError;
}(Error));

/**
 * This error type communicates exceptions that occur during execution in the
 * Magic `<iframe>` context.
 */
var MagicRPCError = /** @class */ (function (_super) {
    __extends(MagicRPCError, _super);
    function MagicRPCError(sourceError) {
        var _this = _super.call(this) || this;
        _this.__proto__ = Error;
        var codeNormalized = Number(sourceError === null || sourceError === void 0 ? void 0 : sourceError.code);
        _this.rawMessage = (sourceError === null || sourceError === void 0 ? void 0 : sourceError.message) || 'Internal error';
        _this.code = (0,_util_type_guards__WEBPACK_IMPORTED_MODULE_1__.isJsonRpcErrorCode)(codeNormalized) ? codeNormalized : _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.RPCErrorCode.InternalError;
        _this.message = "Magic RPC Error: [" + _this.code + "] " + _this.rawMessage;
        Object.setPrototypeOf(_this, MagicRPCError.prototype);
        return _this;
    }
    return MagicRPCError;
}(Error));

/**
 * In contrast to `SDKError` objects, this "warning" type communicates important
 * context that does not rise to the level of an exception. These should be
 * logged rather than thrown.
 */
var MagicSDKWarning = /** @class */ (function () {
    function MagicSDKWarning(code, rawMessage) {
        this.code = code;
        this.rawMessage = rawMessage;
        this.message = "Magic SDK Warning: [" + code + "] " + rawMessage;
    }
    /**
     * Logs this warning to the console.
     */
    MagicSDKWarning.prototype.log = function () {
        console.warn(this.message);
    };
    return MagicSDKWarning;
}());

/**
 * This error type is reserved for communicating errors that arise during
 * execution of Magic SDK Extension methods. Compare this to the `SDKError`
 * type, specifically in context of Extensions.
 */
var MagicExtensionError = /** @class */ (function (_super) {
    __extends(MagicExtensionError, _super);
    function MagicExtensionError(ext, code, rawMessage, data) {
        var _this = _super.call(this, "Magic Extension Error (" + ext.name + "): [" + code + "] " + rawMessage) || this;
        _this.code = code;
        _this.rawMessage = rawMessage;
        _this.data = data;
        _this.__proto__ = Error;
        Object.setPrototypeOf(_this, MagicExtensionError.prototype);
        return _this;
    }
    return MagicExtensionError;
}(Error));

/**
 * In contrast to `MagicExtensionError` objects, this "warning" type
 * communicates important context that does not rise to the level of an
 * exception. These should be logged rather than thrown.
 */
var MagicExtensionWarning = /** @class */ (function () {
    function MagicExtensionWarning(ext, code, rawMessage) {
        this.code = code;
        this.rawMessage = rawMessage;
        this.message = "Magic Extension Warning (" + ext.name + "): [" + code + "] " + rawMessage;
    }
    /**
     * Logs this warning to the console.
     */
    MagicExtensionWarning.prototype.log = function () {
        console.warn(this.message);
    };
    return MagicExtensionWarning;
}());

// --- SDK error factories
function createMissingApiKeyError() {
    return new MagicSDKError(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.MissingApiKey, 'Please provide an API key that you acquired from the Magic developer dashboard.');
}
function createModalNotReadyError() {
    return new MagicSDKError(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.ModalNotReady, 'Modal is not ready.');
}
function createMalformedResponseError() {
    return new MagicSDKError(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.MalformedResponse, 'Response from the Magic iframe is malformed.');
}
function createExtensionNotInitializedError(member) {
    return new MagicSDKError(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.ExtensionNotInitialized, "Extensions must be initialized with a Magic SDK instance before `Extension." + member + "` can be accessed. Do not invoke `Extension." + member + "` inside an extension constructor.");
}
function createWebAuthnNotSupportError() {
    return new MagicSDKError(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.WebAuthnNotSupported, 'WebAuthn is not supported in this device.');
}
function createWebAuthCreateCredentialError(message) {
    return new MagicSDKError(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.WebAuthnCreateCredentialError, "Error creating credential: " + message);
}
function createIncompatibleExtensionsError(extensions) {
    var npmName = _sdk_environment__WEBPACK_IMPORTED_MODULE_2__.envNameToNpmName[_sdk_environment__WEBPACK_IMPORTED_MODULE_2__.SDKEnvironment.sdkName];
    var msg = "Some extensions are incompatible with `" + npmName + "@" + _sdk_environment__WEBPACK_IMPORTED_MODULE_2__.SDKEnvironment.version + "`:";
    extensions
        .filter(function (ext) { return typeof ext.compat !== 'undefined' && ext.compat !== null; })
        .forEach(function (ext) {
        var compat = ext.compat[npmName];
        /* istanbul ignore else */
        if (typeof compat === 'string') {
            msg += "\n  - Extension `" + ext.name + "` supports version(s) `" + compat + "`";
        }
        else if (!compat) {
            msg += "\n  - Extension `" + ext.name + "` does not support " + _sdk_environment__WEBPACK_IMPORTED_MODULE_2__.SDKEnvironment.target + " environments.";
        }
        // Else case is irrelevant here here
        // (we filter out extensions with missing `compat` field)
    });
    return new MagicSDKError(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.IncompatibleExtensions, msg);
}
function createInvalidArgumentError(options) {
    /**
     * Parses the argument index (given by `argument`) to attach the correct ordinal suffix.
     * (i.e.: 1st, 2nd, 3rd, 4th, etc.)
     */
    var ordinalSuffix = function (i) {
        var iAdjusted = i + 1; // Argument is zero-indexed.
        var j = iAdjusted % 10;
        var k = iAdjusted % 100;
        if (j === 1 && k !== 11)
            return iAdjusted + "st";
        if (j === 2 && k !== 12)
            return iAdjusted + "nd";
        if (j === 3 && k !== 13)
            return iAdjusted + "rd";
        return iAdjusted + "th";
    };
    return new MagicSDKError(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKErrorCode.InvalidArgument, "Invalid " + ordinalSuffix(options.argument) + " argument given to `" + options.procedure + "`.\n" +
        ("  Expected: `" + options.expected + "`\n") +
        ("  Received: `" + options.received + "`"));
}
// --- SDK warning factories
function createDuplicateIframeWarning() {
    return new MagicSDKWarning(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKWarningCode.DuplicateIframe, 'Duplicate iframes found.');
}
function createSynchronousWeb3MethodWarning() {
    return new MagicSDKWarning(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKWarningCode.SyncWeb3Method, 'Non-async web3 methods are deprecated in web3 > 1.0 and are not supported by the Magic web3 provider. Please use an async method instead.');
}
function createReactNativeEndpointConfigurationWarning() {
    return new MagicSDKWarning(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKWarningCode.ReactNativeEndpointConfiguration, "CUSTOM DOMAINS ARE NOT SUPPORTED WHEN USING MAGIC SDK WITH REACT NATIVE! The `endpoint` parameter SHOULD NOT be provided. The Magic `<iframe>` is automatically wrapped by a WebView pointed at `" + _sdk_environment__WEBPACK_IMPORTED_MODULE_2__.SDKEnvironment.defaultEndpoint + "`. Changing this default behavior will lead to unexpected results and potentially security-threatening bugs.");
}
function createDeprecationWarning(options) {
    var method = options.method, removalVersions = options.removalVersions, useInstead = options.useInstead;
    var npmName = _sdk_environment__WEBPACK_IMPORTED_MODULE_2__.envNameToNpmName[_sdk_environment__WEBPACK_IMPORTED_MODULE_2__.SDKEnvironment.sdkName];
    var removalVersion = removalVersions[npmName];
    var useInsteadSuffix = useInstead ? " Use `" + useInstead + "` instead." : '';
    var message = "`" + method + "` will be removed from `" + npmName + "` in version `" + removalVersion + "`." + useInsteadSuffix;
    return new MagicSDKWarning(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.SDKWarningCode.DeprecationNotice, message);
}
//# sourceMappingURL=sdk-exceptions.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/core/sdk.js":
/*!******************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/core/sdk.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SDKBase": function() { return /* binding */ SDKBase; }
/* harmony export */ });
/* harmony import */ var semver_functions_satisfies__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! semver/functions/satisfies */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/satisfies.js");
/* harmony import */ var semver_functions_satisfies__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(semver_functions_satisfies__WEBPACK_IMPORTED_MODULE_0__);
/* harmony import */ var _util_base64_json__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../util/base64-json */ "./node_modules/@magic-sdk/provider/dist/module/util/base64-json.js");
/* harmony import */ var _sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./sdk-exceptions */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js");
/* harmony import */ var _modules_auth__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../modules/auth */ "./node_modules/@magic-sdk/provider/dist/module/modules/auth/index.js");
/* harmony import */ var _modules_user__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../modules/user */ "./node_modules/@magic-sdk/provider/dist/module/modules/user/index.js");
/* harmony import */ var _modules_rpc_provider__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../modules/rpc-provider */ "./node_modules/@magic-sdk/provider/dist/module/modules/rpc-provider/index.js");
/* harmony import */ var _util_url__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ../util/url */ "./node_modules/@magic-sdk/provider/dist/module/util/url.js");
/* harmony import */ var _modules_base_extension__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ../modules/base-extension */ "./node_modules/@magic-sdk/provider/dist/module/modules/base-extension.js");
/* harmony import */ var _util_type_guards__WEBPACK_IMPORTED_MODULE_8__ = __webpack_require__(/*! ../util/type-guards */ "./node_modules/@magic-sdk/provider/dist/module/util/type-guards.js");
/* harmony import */ var _sdk_environment__WEBPACK_IMPORTED_MODULE_9__ = __webpack_require__(/*! ./sdk-environment */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-environment.js");
/* eslint-disable no-underscore-dangle, no-param-reassign  */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};










/**
 * Checks if the given `ext` is compatible with the platform & version of Magic
 * SDK currently in use.
 */
function checkExtensionCompat(ext) {
    if (ext.compat) {
        // Check web compatibility
        if (_sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.sdkName === 'magic-sdk') {
            return typeof ext.compat['magic-sdk'] === 'string'
                ? semver_functions_satisfies__WEBPACK_IMPORTED_MODULE_0___default()(_sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.version, ext.compat['magic-sdk'])
                : !!ext.compat['magic-sdk'];
        }
        // Check React Native compatibility
        /* istanbul ignore else */
        if (_sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.sdkName === 'magic-sdk-rn') {
            return typeof ext.compat['@magic-sdk/react-native'] === 'string'
                ? semver_functions_satisfies__WEBPACK_IMPORTED_MODULE_0___default()(_sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.version, ext.compat['@magic-sdk/react-native'])
                : !!ext.compat['@magic-sdk/react-native'];
        }
        // Else case should be impossible here...
    }
    // To gracefully support older extensions, we assume
    // compatibility when the `compat` field is missing.
    return true;
}
/**
 * Initializes SDK extensions, checks for platform/version compatiblity issues,
 * then consolidates any global configurations provided by those extensions.
 */
function prepareExtensions(options) {
    var _this = this;
    var _a;
    var extensions = (_a = options === null || options === void 0 ? void 0 : options.extensions) !== null && _a !== void 0 ? _a : [];
    var extConfig = {};
    var incompatibleExtensions = [];
    if (Array.isArray(extensions)) {
        extensions.forEach(function (ext) {
            if (checkExtensionCompat(ext)) {
                ext.init(_this);
                _this[ext.name] = ext;
                if (ext instanceof _modules_base_extension__WEBPACK_IMPORTED_MODULE_7__.Extension.Internal) {
                    if (!(0,_util_type_guards__WEBPACK_IMPORTED_MODULE_8__.isEmpty)(ext.config))
                        extConfig[ext.name] = ext.config;
                }
            }
            else {
                incompatibleExtensions.push(ext);
            }
        });
    }
    else {
        Object.keys(extensions).forEach(function (name) {
            if (checkExtensionCompat(extensions[name])) {
                extensions[name].init(_this);
                var ext = extensions[name];
                _this[name] = ext;
                if (ext instanceof _modules_base_extension__WEBPACK_IMPORTED_MODULE_7__.Extension.Internal) {
                    if (!(0,_util_type_guards__WEBPACK_IMPORTED_MODULE_8__.isEmpty)(ext.config))
                        extConfig[extensions[name].name] = ext.config;
                }
            }
            else {
                incompatibleExtensions.push(extensions[name]);
            }
        });
    }
    if (incompatibleExtensions.length) {
        throw (0,_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.createIncompatibleExtensionsError)(incompatibleExtensions);
    }
    return extConfig;
}
var SDKBase = /** @class */ (function () {
    /**
     * Creates an instance of Magic SDK.
     */
    function SDKBase(apiKey, options) {
        var _a;
        this.apiKey = apiKey;
        if (!apiKey)
            throw (0,_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.createMissingApiKeyError)();
        if (_sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.target === 'react-native' && (options === null || options === void 0 ? void 0 : options.endpoint)) {
            (0,_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.createReactNativeEndpointConfigurationWarning)().log();
        }
        var defaultEndpoint = _sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.defaultEndpoint, version = _sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.version;
        this.endpoint = (0,_util_url__WEBPACK_IMPORTED_MODULE_6__.createURL)((_a = options === null || options === void 0 ? void 0 : options.endpoint) !== null && _a !== void 0 ? _a : defaultEndpoint).origin;
        // Assign API Modules
        this.auth = new _modules_auth__WEBPACK_IMPORTED_MODULE_3__.AuthModule(this);
        this.user = new _modules_user__WEBPACK_IMPORTED_MODULE_4__.UserModule(this);
        this.rpcProvider = new _modules_rpc_provider__WEBPACK_IMPORTED_MODULE_5__.RPCProviderModule(this);
        // Prepare Extensions
        var extConfig = prepareExtensions.call(this, options);
        // Build query params for the current `ViewController`
        this.encodedQueryParams = (0,_util_base64_json__WEBPACK_IMPORTED_MODULE_1__.encodeJSON)({
            API_KEY: this.apiKey,
            DOMAIN_ORIGIN: window.location ? window.location.origin : '',
            ETH_NETWORK: options === null || options === void 0 ? void 0 : options.network,
            host: (0,_util_url__WEBPACK_IMPORTED_MODULE_6__.createURL)(this.endpoint).host,
            sdk: _sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.sdkName,
            version: version,
            ext: (0,_util_type_guards__WEBPACK_IMPORTED_MODULE_8__.isEmpty)(extConfig) ? undefined : extConfig,
            locale: (options === null || options === void 0 ? void 0 : options.locale) || 'en_US',
        });
    }
    Object.defineProperty(SDKBase.prototype, "transport", {
        /**
         * Represents the JSON RPC payload message channel associated with this
         * `MagicSDK` instance.
         */
        get: function () {
            if (!SDKBase.__transports__.has(this.encodedQueryParams)) {
                SDKBase.__transports__.set(this.encodedQueryParams, new _sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.PayloadTransport(this.endpoint, this.encodedQueryParams));
            }
            return SDKBase.__transports__.get(this.encodedQueryParams);
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(SDKBase.prototype, "overlay", {
        /**
         * Represents the view controller associated with this `MagicSDK` instance.
         */
        get: function () {
            if (!SDKBase.__overlays__.has(this.encodedQueryParams)) {
                var controller = new _sdk_environment__WEBPACK_IMPORTED_MODULE_9__.SDKEnvironment.ViewController(this.transport, this.endpoint, this.encodedQueryParams);
                SDKBase.__overlays__.set(this.encodedQueryParams, controller);
            }
            return SDKBase.__overlays__.get(this.encodedQueryParams);
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Preloads the Magic view, allowing for faster initial requests in browser
     * environments. Awaiting the returned promise will signal when the Magic view
     * has completed loading and is ready for requests.
     */
    SDKBase.prototype.preload = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.overlay.ready];
                    case 1:
                        _a.sent();
                        return [2 /*return*/];
                }
            });
        });
    };
    SDKBase.__transports__ = new Map();
    SDKBase.__overlays__ = new Map();
    return SDKBase;
}());

//# sourceMappingURL=sdk.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/core/view-controller.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/core/view-controller.js ***!
  \******************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "ViewController": function() { return /* binding */ ViewController; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");

var ViewController = /** @class */ (function () {
    function ViewController(transport, endpoint, encodedQueryParams) {
        this.transport = transport;
        this.endpoint = endpoint;
        this.encodedQueryParams = encodedQueryParams;
        this.ready = this.waitForReady();
        if (this.init)
            this.init();
        this.listen();
    }
    ViewController.prototype.waitForReady = function () {
        var _this = this;
        return new Promise(function (resolve) {
            _this.transport.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_OVERLAY_READY, function () { return resolve(); });
        });
    };
    /**
     * Listen for messages sent from the underlying Magic `<WebView>`.
     */
    ViewController.prototype.listen = function () {
        var _this = this;
        this.transport.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_HIDE_OVERLAY, function () {
            _this.hideOverlay();
        });
        this.transport.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_SHOW_OVERLAY, function () {
            _this.showOverlay();
        });
    };
    return ViewController;
}());

//# sourceMappingURL=view-controller.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/index.js":
/*!***************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/index.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SDKBase": function() { return /* reexport safe */ _core_sdk__WEBPACK_IMPORTED_MODULE_0__.SDKBase; },
/* harmony export */   "createSDK": function() { return /* reexport safe */ _core_sdk_environment__WEBPACK_IMPORTED_MODULE_1__.createSDK; },
/* harmony export */   "PayloadTransport": function() { return /* reexport safe */ _core_payload_transport__WEBPACK_IMPORTED_MODULE_2__.PayloadTransport; },
/* harmony export */   "ViewController": function() { return /* reexport safe */ _core_view_controller__WEBPACK_IMPORTED_MODULE_3__.ViewController; },
/* harmony export */   "Extension": function() { return /* reexport safe */ _modules_base_extension__WEBPACK_IMPORTED_MODULE_5__.Extension; }
/* harmony export */ });
/* harmony import */ var _core_sdk__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/sdk */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk.js");
/* harmony import */ var _core_sdk_environment__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/sdk-environment */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-environment.js");
/* harmony import */ var _core_payload_transport__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/payload-transport */ "./node_modules/@magic-sdk/provider/dist/module/core/payload-transport.js");
/* harmony import */ var _core_view_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./core/view-controller */ "./node_modules/@magic-sdk/provider/dist/module/core/view-controller.js");
/* harmony import */ var _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./core/sdk-exceptions */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__) if(["default","SDKBase","createSDK","PayloadTransport","ViewController","Extension"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _modules_base_extension__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./modules/base-extension */ "./node_modules/@magic-sdk/provider/dist/module/modules/base-extension.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./util */ "./node_modules/@magic-sdk/provider/dist/module/util/index.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _util__WEBPACK_IMPORTED_MODULE_6__) if(["default","SDKBase","createSDK","PayloadTransport","ViewController","Extension"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _util__WEBPACK_IMPORTED_MODULE_6__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/modules/auth/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/modules/auth/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "AuthModule": function() { return /* binding */ AuthModule; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");
/* harmony import */ var _base_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base-module */ "./node_modules/@magic-sdk/provider/dist/module/modules/base-module.js");
/* harmony import */ var _core_json_rpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/json-rpc */ "./node_modules/@magic-sdk/provider/dist/module/core/json-rpc.js");
/* harmony import */ var _util_webauthn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/webauthn */ "./node_modules/@magic-sdk/provider/dist/module/util/webauthn.js");
/* harmony import */ var _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/sdk-exceptions */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js");
/* harmony import */ var _core_sdk_environment__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ../../core/sdk-environment */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-environment.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};






var AuthModule = /** @class */ (function (_super) {
    __extends(AuthModule, _super);
    function AuthModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Initiate the "magic link" login flow for a user. If the flow is successful,
     * this method will return a Decentralized ID token (with a default lifespan
     * of 15 minutes).
     */
    AuthModule.prototype.loginWithMagicLink = function (configuration) {
        var email = configuration.email, _a = configuration.showUI, showUI = _a === void 0 ? true : _a, redirectURI = configuration.redirectURI;
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithMagicLink, [
            { email: email, showUI: showUI, redirectURI: redirectURI },
        ]);
        return this.request(requestPayload);
    };
    /**
     * Log a user in with a special one-time-use credential token. This is
     * currently used during magic link flows with a configured redirect to
     * hydrate the user session at the end of the flow. If the flow is successful,
     * this method will return a Decentralized ID token (with a default lifespan
     * of 15 minutes).
     *
     * If no argument is provided, a credential is automatically parsed from
     * `window.location.search`.
     */
    AuthModule.prototype.loginWithCredential = function (credentialOrQueryString) {
        var credentialResolved = credentialOrQueryString !== null && credentialOrQueryString !== void 0 ? credentialOrQueryString : '';
        if (!credentialOrQueryString && _core_sdk_environment__WEBPACK_IMPORTED_MODULE_5__.SDKEnvironment.target === 'web') {
            credentialResolved = window.location.search;
            // Remove the query from the redirect callback as a precaution.
            var urlWithoutQuery = window.location.origin + window.location.pathname;
            window.history.replaceState(null, '', urlWithoutQuery);
        }
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithCredential, [credentialResolved]);
        return this.request(requestPayload);
    };
    AuthModule.prototype.registerWithWebAuthn = function (configuration) {
        return __awaiter(this, void 0, void 0, function () {
            var username, _a, nickname, options, credential, err_1;
            return __generator(this, function (_b) {
                switch (_b.label) {
                    case 0:
                        if (!window.PublicKeyCredential) {
                            throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__.createWebAuthnNotSupportError)();
                        }
                        username = configuration.username, _a = configuration.nickname, nickname = _a === void 0 ? '' : _a;
                        return [4 /*yield*/, this.request((0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.WebAuthnRegistrationStart, [{ username: username }]))];
                    case 1:
                        options = _b.sent();
                        _b.label = 2;
                    case 2:
                        _b.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, navigator.credentials.create({
                                publicKey: options.credential_options,
                            })];
                    case 3:
                        credential = (_b.sent());
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _b.sent();
                        throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__.createWebAuthCreateCredentialError)(err_1);
                    case 5: return [2 /*return*/, this.request((0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.RegisterWithWebAuth, [
                            {
                                id: options.id,
                                nickname: nickname,
                                transport: credential.response.getTransports(),
                                user_agent: navigator.userAgent,
                                registration_response: (0,_util_webauthn__WEBPACK_IMPORTED_MODULE_3__.transformNewAssertionForServer)(credential),
                            },
                        ]))];
                }
            });
        });
    };
    AuthModule.prototype.loginWithWebAuthn = function (configuration) {
        return __awaiter(this, void 0, void 0, function () {
            var username, transformedCredentialRequestOptions, assertion, err_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!window.PublicKeyCredential) {
                            throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__.createWebAuthnNotSupportError)();
                        }
                        username = configuration.username;
                        return [4 /*yield*/, this.request((0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.LoginWithWebAuthn, [{ username: username }]))];
                    case 1:
                        transformedCredentialRequestOptions = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, navigator.credentials.get({
                                publicKey: transformedCredentialRequestOptions,
                            })];
                    case 3:
                        assertion = (_a.sent());
                        return [3 /*break*/, 5];
                    case 4:
                        err_2 = _a.sent();
                        throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__.createWebAuthCreateCredentialError)(err_2);
                    case 5: return [2 /*return*/, this.request((0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.WebAuthnLoginVerfiy, [
                            {
                                username: username,
                                assertion_response: (0,_util_webauthn__WEBPACK_IMPORTED_MODULE_3__.transformAssertionForServer)(assertion),
                            },
                        ]))];
                }
            });
        });
    };
    return AuthModule;
}(_base_module__WEBPACK_IMPORTED_MODULE_1__.BaseModule));

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/modules/base-extension.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/modules/base-extension.js ***!
  \********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Extension": function() { return /* binding */ Extension; }
/* harmony export */ });
/* harmony import */ var _core_json_rpc__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/json-rpc */ "./node_modules/@magic-sdk/provider/dist/module/core/json-rpc.js");
/* harmony import */ var _base_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./base-module */ "./node_modules/@magic-sdk/provider/dist/module/modules/base-module.js");
/* harmony import */ var _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/sdk-exceptions */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js");
/* harmony import */ var _util__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util */ "./node_modules/@magic-sdk/provider/dist/module/util/index.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();




var BaseExtension = /** @class */ (function (_super) {
    __extends(BaseExtension, _super);
    function BaseExtension() {
        var _this = _super.call(this, undefined) || this;
        _this.isInitialized = false;
        _this.utils = {
            createPromiEvent: _util__WEBPACK_IMPORTED_MODULE_3__.createPromiEvent,
            isPromiEvent: _util__WEBPACK_IMPORTED_MODULE_3__.isPromiEvent,
            encodeJSON: _util__WEBPACK_IMPORTED_MODULE_3__.encodeJSON,
            decodeJSON: _util__WEBPACK_IMPORTED_MODULE_3__.decodeJSON,
            encodeQueryParameters: _util__WEBPACK_IMPORTED_MODULE_3__.encodeQueryParameters,
            decodeQueryParameters: _util__WEBPACK_IMPORTED_MODULE_3__.decodeQueryParameters,
            createJsonRpcRequestPayload: _core_json_rpc__WEBPACK_IMPORTED_MODULE_0__.createJsonRpcRequestPayload,
            standardizeJsonRpcRequestPayload: _core_json_rpc__WEBPACK_IMPORTED_MODULE_0__.standardizeJsonRpcRequestPayload,
            storage: _util__WEBPACK_IMPORTED_MODULE_3__.storage,
        };
        var sdkAccessFields = ['request', 'transport', 'overlay', 'sdk'];
        // Disallow SDK access before initialization.
        return new Proxy(_this, {
            get: function (target, prop, receiver) {
                if (sdkAccessFields.includes(prop) && !_this.isInitialized) {
                    throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.createExtensionNotInitializedError)(prop);
                }
                return Reflect.get(target, prop, receiver);
            },
        });
    }
    /**
     * Registers a Magic SDK instance with this Extension.
     */
    BaseExtension.prototype.init = function (sdk) {
        if (this.isInitialized)
            return;
        this.sdk = sdk;
        this.isInitialized = true;
    };
    /**
     * Creates a deprecation warning wrapped with a native Magic SDK warning type.
     * Best practice is to warn users of upcoming deprecations at least one major
     * version before the change is implemented. You can use this method to
     * communicate deprecations in a manner consistent with Magic SDK core code.
     */
    BaseExtension.prototype.createDeprecationWarning = function (options) {
        var method = options.method, removalVersion = options.removalVersion, useInstead = options.useInstead;
        var useInsteadSuffix = useInstead ? " Use `" + useInstead + "` instead." : '';
        var message = "`" + method + "` will be removed from this Extension in version `" + removalVersion + "`." + useInsteadSuffix;
        return new _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.MagicExtensionWarning(this, 'DEPRECATION_NOTICE', message);
    };
    /**
     * Creates a warning wrapped with a native Magic SDK warning type. This
     * maintains consistency in warning messaging for consumers of Magic SDK and
     * this Extension.
     */
    BaseExtension.prototype.createWarning = function (code, message) {
        return new _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.MagicExtensionWarning(this, code, message);
    };
    /**
     * Creates an error wrapped with a native Magic SDK error type. This maintains
     * consistency in error handling for consumers of Magic SDK and this
     * Extension.
     */
    BaseExtension.prototype.createError = function (code, message, data) {
        return new _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.MagicExtensionError(this, code, message, data);
    };
    /**
     * Throws an error wrapped with a native Magic SDK error type. This maintains
     * consistency in error handling for consumers of Magic SDK and this
     * Extension.
     */
    BaseExtension.prototype.raiseError = function (code, message, data) {
        throw new _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.MagicExtensionError(this, code, message, data);
    };
    return BaseExtension;
}(_base_module__WEBPACK_IMPORTED_MODULE_1__.BaseModule));
var InternalExtension = /** @class */ (function (_super) {
    __extends(InternalExtension, _super);
    function InternalExtension() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return InternalExtension;
}(BaseExtension));
var Extension = /** @class */ (function (_super) {
    __extends(Extension, _super);
    function Extension() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * This is a special constructor used to mark an extension as "official." Only
     * official extensions can interact with the iframe using custom JSON RPC
     * methods and business logic. This is intended for internal-use only and
     * provides no advantage to open-source extension developers.
     *
     * @internal
     */
    Extension.Internal = InternalExtension;
    return Extension;
}(BaseExtension));

//# sourceMappingURL=base-extension.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/modules/base-module.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/modules/base-module.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "BaseModule": function() { return /* binding */ BaseModule; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");
/* harmony import */ var _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../core/sdk-exceptions */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js");
/* harmony import */ var _core_json_rpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../core/json-rpc */ "./node_modules/@magic-sdk/provider/dist/module/core/json-rpc.js");
/* harmony import */ var _util_promise_tools__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../util/promise-tools */ "./node_modules/@magic-sdk/provider/dist/module/util/promise-tools.js");
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (undefined && undefined.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};




var BaseModule = /** @class */ (function () {
    function BaseModule(sdk) {
        this.sdk = sdk;
    }
    Object.defineProperty(BaseModule.prototype, "transport", {
        /**
         * The `PayloadTransport` for the SDK instance registered to this module.
         */
        get: function () {
            return this.sdk.transport;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(BaseModule.prototype, "overlay", {
        /**
         * The `ViewController` for the SDK instance registered to this module.
         */
        get: function () {
            return this.sdk.overlay;
        },
        enumerable: true,
        configurable: true
    });
    /**
     * Emits promisified requests to the Magic `<iframe>` context.
     */
    BaseModule.prototype.request = function (payload) {
        var responsePromise = this.transport.post(this.overlay, _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.standardizeJsonRpcRequestPayload)(payload));
        // PromiEvent-ify the response.
        var promiEvent = (0,_util_promise_tools__WEBPACK_IMPORTED_MODULE_3__.createPromiEvent)(function (resolve, reject) {
            responsePromise
                .then(function (res) {
                cleanupEvents();
                if (res.hasError)
                    reject(new _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_1__.MagicRPCError(res.payload.error));
                else if (res.hasResult)
                    resolve(res.payload.result);
                else
                    throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_1__.createMalformedResponseError)();
            })
                .catch(function (err) {
                cleanupEvents();
                reject(err);
            });
        });
        // Listen for events from the `<iframe>` associated with the current payload
        // and emit those to `PromiEvent` subscribers.
        var cleanupEvents = this.transport.on(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicIncomingWindowMessage.MAGIC_HANDLE_EVENT, function (evt) {
            var _a;
            var response = evt.data.response;
            if (response.id === payload.id && ((_a = response.result) === null || _a === void 0 ? void 0 : _a.event)) {
                var _b = response.result, event_1 = _b.event, _c = _b.params, params = _c === void 0 ? [] : _c;
                promiEvent.emit.apply(promiEvent, __spread([event_1], params));
            }
        });
        return promiEvent;
    };
    return BaseModule;
}());

//# sourceMappingURL=base-module.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/modules/rpc-provider/index.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/modules/rpc-provider/index.js ***!
  \************************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "RPCProviderModule": function() { return /* binding */ RPCProviderModule; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");
/* harmony import */ var _base_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base-module */ "./node_modules/@magic-sdk/provider/dist/module/modules/base-module.js");
/* harmony import */ var _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/sdk-exceptions */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js");
/* harmony import */ var _core_json_rpc__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../core/json-rpc */ "./node_modules/@magic-sdk/provider/dist/module/core/json-rpc.js");
/* harmony import */ var _util_events__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../util/events */ "./node_modules/@magic-sdk/provider/dist/module/util/events.js");
/* eslint-disable consistent-return, prefer-spread */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (undefined && undefined.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};





var _a = (0,_util_events__WEBPACK_IMPORTED_MODULE_4__.createTypedEmitter)(), createBoundEmitterMethod = _a.createBoundEmitterMethod, createChainingEmitterMethod = _a.createChainingEmitterMethod;
/** */
var RPCProviderModule = /** @class */ (function (_super) {
    __extends(RPCProviderModule, _super);
    function RPCProviderModule() {
        // Implements EIP 1193:
        // https://github.com/ethereum/EIPs/blob/master/EIPS/eip-1193.md
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.isMagic = true;
        _this.on = createChainingEmitterMethod('on', _this);
        _this.once = createChainingEmitterMethod('once', _this);
        _this.addListener = createChainingEmitterMethod('addListener', _this);
        _this.off = createChainingEmitterMethod('off', _this);
        _this.removeListener = createChainingEmitterMethod('removeListener', _this);
        _this.removeAllListeners = createChainingEmitterMethod('removeAllListeners', _this);
        _this.emit = createBoundEmitterMethod('emit');
        _this.eventNames = createBoundEmitterMethod('eventNames');
        _this.listeners = createBoundEmitterMethod('listeners');
        _this.listenerCount = createBoundEmitterMethod('listenerCount');
        return _this;
    }
    /* eslint-enable prettier/prettier */
    RPCProviderModule.prototype.sendAsync = function (payload, onRequestComplete) {
        if (!onRequestComplete) {
            throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.createInvalidArgumentError)({
                procedure: 'Magic.rpcProvider.sendAsync',
                argument: 1,
                expected: 'function',
                received: onRequestComplete === null ? 'null' : typeof onRequestComplete,
            });
        }
        if (Array.isArray(payload)) {
            this.transport
                .post(this.overlay, _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, payload.map(function (p) { return (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_3__.standardizeJsonRpcRequestPayload)(p); }))
                .then(function (batchResponse) {
                onRequestComplete(null, batchResponse.map(function (response) { return (__assign(__assign({}, response.payload), { error: response.hasError ? new _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.MagicRPCError(response.payload.error) : null })); }));
            });
        }
        else {
            var finalPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_3__.standardizeJsonRpcRequestPayload)(payload);
            this.transport
                .post(this.overlay, _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicOutgoingWindowMessage.MAGIC_HANDLE_REQUEST, finalPayload)
                .then(function (response) {
                onRequestComplete(response.hasError ? new _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.MagicRPCError(response.payload.error) : null, response.payload);
            });
        }
    };
    /* eslint-enable prettier/prettier */
    RPCProviderModule.prototype.send = function (payloadOrMethod, onRequestCompleteOrParams) {
        // Case #1
        // Web3 >= 1.0.0-beta.38 calls `send` with method and parameters.
        if (typeof payloadOrMethod === 'string') {
            var payload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_3__.createJsonRpcRequestPayload)(payloadOrMethod, Array.isArray(onRequestCompleteOrParams) ? onRequestCompleteOrParams : []);
            return this.request(payload);
        }
        // Case #2
        // Web3 <= 1.0.0-beta.37 uses `send` with a callback for async queries.
        if (Array.isArray(payloadOrMethod) || !!onRequestCompleteOrParams) {
            /* eslint-disable-next-line @typescript-eslint/no-unnecessary-type-assertion */
            this.sendAsync(payloadOrMethod, onRequestCompleteOrParams);
            return;
        }
        // Case #3
        // Legacy synchronous methods (unsupported).
        var warning = (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_2__.createSynchronousWeb3MethodWarning)();
        warning.log();
        return new _core_json_rpc__WEBPACK_IMPORTED_MODULE_3__.JsonRpcResponse(payloadOrMethod).applyError({
            code: -32603,
            message: warning.rawMessage,
        }).payload;
    };
    RPCProviderModule.prototype.enable = function () {
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_3__.createJsonRpcRequestPayload)('eth_accounts');
        return this.request(requestPayload);
    };
    return RPCProviderModule;
}(_base_module__WEBPACK_IMPORTED_MODULE_1__.BaseModule));

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/modules/user/index.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/modules/user/index.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "UserModule": function() { return /* binding */ UserModule; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");
/* harmony import */ var _base_module__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../base-module */ "./node_modules/@magic-sdk/provider/dist/module/modules/base-module.js");
/* harmony import */ var _core_json_rpc__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ../../core/json-rpc */ "./node_modules/@magic-sdk/provider/dist/module/core/json-rpc.js");
/* harmony import */ var _util_webauthn__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ../../util/webauthn */ "./node_modules/@magic-sdk/provider/dist/module/util/webauthn.js");
/* harmony import */ var _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ../../core/sdk-exceptions */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};





var UserModule = /** @class */ (function (_super) {
    __extends(UserModule, _super);
    function UserModule() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** */
    UserModule.prototype.getIdToken = function (configuration) {
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GetIdToken, [configuration]);
        return this.request(requestPayload);
    };
    /** */
    UserModule.prototype.generateIdToken = function (configuration) {
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GenerateIdToken, [configuration]);
        return this.request(requestPayload);
    };
    /** */
    UserModule.prototype.getMetadata = function () {
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GetMetadata);
        return this.request(requestPayload);
    };
    /** */
    UserModule.prototype.updateEmail = function (configuration) {
        var email = configuration.email, _a = configuration.showUI, showUI = _a === void 0 ? true : _a;
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UpdateEmail, [{ email: email, showUI: showUI }]);
        return this.request(requestPayload);
    };
    /** */
    UserModule.prototype.isLoggedIn = function () {
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.IsLoggedIn);
        return this.request(requestPayload);
    };
    /** */
    UserModule.prototype.logout = function () {
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.Logout);
        return this.request(requestPayload);
    };
    UserModule.prototype.getWebAuthnInfo = function () {
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.GetWebAuthnInfo, []);
        return this.request(requestPayload);
    };
    UserModule.prototype.updateWebAuthnInfo = function (configuration) {
        var id = configuration.id, nickname = configuration.nickname;
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UpdateWebAuthnInfo, [
            {
                webAuthnCredentialsId: id,
                nickname: nickname,
            },
        ]);
        return this.request(requestPayload);
    };
    UserModule.prototype.unregisterWebAuthnDevice = function (id) {
        var requestPayload = (0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.UnregisterWebAuthDevice, [
            {
                webAuthnCredentialsId: id,
            },
        ]);
        return this.request(requestPayload);
    };
    UserModule.prototype.registerWebAuthnDevice = function (nickname) {
        if (nickname === void 0) { nickname = ''; }
        return __awaiter(this, void 0, void 0, function () {
            var options, credential, err_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!window.PublicKeyCredential) {
                            throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__.createWebAuthnNotSupportError)();
                        }
                        return [4 /*yield*/, this.request((0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.RegisterWebAuthDeviceStart, []))];
                    case 1:
                        options = _a.sent();
                        _a.label = 2;
                    case 2:
                        _a.trys.push([2, 4, , 5]);
                        return [4 /*yield*/, navigator.credentials.create({
                                publicKey: options.credential_options,
                            })];
                    case 3:
                        credential = (_a.sent());
                        return [3 /*break*/, 5];
                    case 4:
                        err_1 = _a.sent();
                        throw (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_4__.createWebAuthCreateCredentialError)(err_1);
                    case 5: return [2 /*return*/, this.request((0,_core_json_rpc__WEBPACK_IMPORTED_MODULE_2__.createJsonRpcRequestPayload)(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod.RegisterWebAuthDevice, [
                            {
                                nickname: nickname,
                                transport: credential.response.getTransports(),
                                user_agent: navigator.userAgent,
                                registration_response: (0,_util_webauthn__WEBPACK_IMPORTED_MODULE_3__.transformNewAssertionForServer)(credential),
                            },
                        ]))];
                }
            });
        });
    };
    return UserModule;
}(_base_module__WEBPACK_IMPORTED_MODULE_1__.BaseModule));

//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/base64-json.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/base64-json.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "encodeJSON": function() { return /* binding */ encodeJSON; },
/* harmony export */   "decodeJSON": function() { return /* binding */ decodeJSON; },
/* harmony export */   "encodeQueryParameters": function() { return /* binding */ encodeQueryParameters; },
/* harmony export */   "decodeQueryParameters": function() { return /* binding */ decodeQueryParameters; }
/* harmony export */ });
/* harmony import */ var _core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/sdk-exceptions */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-exceptions.js");

/**
 * Given a JSON-serializable object, encode as a Base64 string.
 */
function encodeJSON(options) {
    return btoa(JSON.stringify(options));
}
/**
 * Given a Base64 JSON string, decode a JavaScript object.
 */
function decodeJSON(queryString) {
    return JSON.parse(atob(queryString));
}
// --- DEPRECATED!
/**
 * Given a JSON-serializable object, encode as a Base64 string.
 *
 * @deprecated
 */
/* istanbul ignore next */
function encodeQueryParameters(options) {
    (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_0__.createDeprecationWarning)({
        method: 'encodeQueryParameters()',
        removalVersions: { 'magic-sdk': 'v3.0.0', '@magic-sdk/react-native': 'v3.0.0' },
        useInstead: 'encodeJSON()',
    }).log();
    return btoa(JSON.stringify(options));
}
/**
 * Given a Base64 JSON string, decode a JavaScript object.
 *
 * @deprecated
 */
/* istanbul ignore next */
function decodeQueryParameters(queryString) {
    (0,_core_sdk_exceptions__WEBPACK_IMPORTED_MODULE_0__.createDeprecationWarning)({
        method: 'decodeQueryParameters()',
        removalVersions: { 'magic-sdk': 'v3.0.0', '@magic-sdk/react-native': 'v3.0.0' },
        useInstead: 'decodeJSON()',
    }).log();
    return JSON.parse(atob(queryString));
}
//# sourceMappingURL=base64-json.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/events.js":
/*!*********************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/events.js ***!
  \*********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "TypedEmitter": function() { return /* binding */ TypedEmitter; },
/* harmony export */   "createTypedEmitter": function() { return /* binding */ createTypedEmitter; }
/* harmony export */ });
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! eventemitter3 */ "./node_modules/@magic-sdk/provider/node_modules/eventemitter3/index.js");
/* harmony import */ var eventemitter3__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(eventemitter3__WEBPACK_IMPORTED_MODULE_0__);
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();

/**
 * An extension of `EventEmitter` (provided by `eventemitter3`) with an adjusted
 * type interface that supports the unique structure of Magic SDK modules.
 */
var TypedEmitter = /** @class */ (function (_super) {
    __extends(TypedEmitter, _super);
    function TypedEmitter() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    return TypedEmitter;
}((eventemitter3__WEBPACK_IMPORTED_MODULE_0___default())));

/**
 * Creates a `TypedEmitter` instance and returns helper functions for easily
 * mixing `TypedEmitter` methods into other objects.
 */
function createTypedEmitter() {
    var emitter = new TypedEmitter();
    var createChainingEmitterMethod = function (method, source) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            emitter[method].apply(emitter, args);
            return source;
        };
    };
    var createBoundEmitterMethod = function (method) {
        return function () {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            return emitter[method].apply(emitter, args);
        };
    };
    return {
        emitter: emitter,
        createChainingEmitterMethod: createChainingEmitterMethod,
        createBoundEmitterMethod: createBoundEmitterMethod,
    };
}
//# sourceMappingURL=events.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/get-payload-id.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/get-payload-id.js ***!
  \*****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getPayloadId": function() { return /* binding */ getPayloadId; }
/* harmony export */ });
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
function createIntGenerator() {
    var index;
    return __generator(this, function (_a) {
        switch (_a.label) {
            case 0:
                index = 0;
                _a.label = 1;
            case 1:
                if (false) {}
                if (!(index < Number.MAX_SAFE_INTEGER)) return [3 /*break*/, 3];
                return [4 /*yield*/, ++index];
            case 2:
                _a.sent();
                return [3 /*break*/, 4];
            case 3:
                index = 0;
                _a.label = 4;
            case 4: return [3 /*break*/, 1];
            case 5: return [2 /*return*/];
        }
    });
}
var intGenerator = createIntGenerator();
/**
 * Get an integer ID for attaching to a JSON RPC request payload.
 */
function getPayloadId() {
    return intGenerator.next().value;
}
//# sourceMappingURL=get-payload-id.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/index.js":
/*!********************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/index.js ***!
  \********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "storage": function() { return /* reexport module object */ _storage__WEBPACK_IMPORTED_MODULE_5__; }
/* harmony export */ });
/* harmony import */ var _get_payload_id__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./get-payload-id */ "./node_modules/@magic-sdk/provider/dist/module/util/get-payload-id.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _get_payload_id__WEBPACK_IMPORTED_MODULE_0__) if(["default","storage"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _get_payload_id__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _promise_tools__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./promise-tools */ "./node_modules/@magic-sdk/provider/dist/module/util/promise-tools.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _promise_tools__WEBPACK_IMPORTED_MODULE_1__) if(["default","storage"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _promise_tools__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _base64_json__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./base64-json */ "./node_modules/@magic-sdk/provider/dist/module/util/base64-json.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _base64_json__WEBPACK_IMPORTED_MODULE_2__) if(["default","storage"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _base64_json__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _type_guards__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./type-guards */ "./node_modules/@magic-sdk/provider/dist/module/util/type-guards.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _type_guards__WEBPACK_IMPORTED_MODULE_3__) if(["default","storage"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _type_guards__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _url__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./url */ "./node_modules/@magic-sdk/provider/dist/module/util/url.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _url__WEBPACK_IMPORTED_MODULE_4__) if(["default","storage"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _url__WEBPACK_IMPORTED_MODULE_4__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _storage__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./storage */ "./node_modules/@magic-sdk/provider/dist/module/util/storage.js");







//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/promise-tools.js":
/*!****************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/promise-tools.js ***!
  \****************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isPromiEvent": function() { return /* binding */ isPromiEvent; },
/* harmony export */   "createPromiEvent": function() { return /* binding */ createPromiEvent; },
/* harmony export */   "createAutoCatchingPromise": function() { return /* binding */ createAutoCatchingPromise; }
/* harmony export */ });
/* harmony import */ var _events__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./events */ "./node_modules/@magic-sdk/provider/dist/module/util/events.js");

var promiEventBrand = Symbol('isPromiEvent');
/**
 * Returns `true` if the given `value` is a `PromiEvent`.
 */
function isPromiEvent(value) {
    return !!value[promiEventBrand];
}
/**
 * Create a native JavaScript `Promise` overloaded with strongly-typed methods
 * from `EventEmitter`.
 */
function createPromiEvent(executor) {
    var promise = createAutoCatchingPromise(executor);
    var _a = (0,_events__WEBPACK_IMPORTED_MODULE_0__.createTypedEmitter)(), createBoundEmitterMethod = _a.createBoundEmitterMethod, createChainingEmitterMethod = _a.createChainingEmitterMethod;
    // We save the original `Promise` methods to the following symbols so we can
    // access them internally.
    var thenSymbol = Symbol('Promise.then');
    var catchSymbol = Symbol('Promise.catch');
    var finallySymbol = Symbol('Promise.finally');
    /**
     * Ensures the next object in the `PromiEvent` chain is overloaded with
     * `EventEmitter` methods.
     */
    var createChainingPromiseMethod = function (method, source) { return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        var nextPromise = source[method].apply(source, args);
        return promiEvent(nextPromise);
    }; };
    /**
     * Builds a `PromiEvent` by assigning `EventEmitter` methods to a native
     * `Promise` object.
     */
    var promiEvent = function (source) {
        var _a;
        return Object.assign(source, (_a = {},
            _a[promiEventBrand] = true,
            _a[thenSymbol] = source[thenSymbol] || source.then,
            _a[catchSymbol] = source[catchSymbol] || source.catch,
            _a[finallySymbol] = source[finallySymbol] || source.finally,
            _a.then = createChainingPromiseMethod(thenSymbol, source),
            _a.catch = createChainingPromiseMethod(catchSymbol, source),
            _a.finally = createChainingPromiseMethod(finallySymbol, source),
            _a.on = createChainingEmitterMethod('on', source),
            _a.once = createChainingEmitterMethod('once', source),
            _a.addListener = createChainingEmitterMethod('addListener', source),
            _a.off = createChainingEmitterMethod('off', source),
            _a.removeListener = createChainingEmitterMethod('removeListener', source),
            _a.removeAllListeners = createChainingEmitterMethod('removeAllListeners', source),
            _a.emit = createBoundEmitterMethod('emit'),
            _a.eventNames = createBoundEmitterMethod('eventNames'),
            _a.listeners = createBoundEmitterMethod('listeners'),
            _a.listenerCount = createBoundEmitterMethod('listenerCount'),
            _a));
    };
    var result = promiEvent(promise.then(function (resolved) {
        // Emit default completion events and resolve result.
        result.emit('done', resolved);
        result.emit('settled');
        return resolved;
    }, function (err) {
        // Emit default error events and re-throw.
        result.emit('error', err);
        result.emit('settled');
        throw err;
    }));
    return result;
}
/**
 * Creates a `Promise` with an **async executor** that automatically catches
 * errors occurring within the executor. Nesting promises in this way is usually
 * deemed an _anti-pattern_, but it's useful and clean when promisifying the
 * event-based code that's inherent to JSON RPC.
 *
 * So, here we solve the issue of nested promises by ensuring that no errors
 * mistakenly go unhandled!
 */
function createAutoCatchingPromise(executor) {
    return new Promise(function (resolve, reject) {
        var result = executor(resolve, reject);
        Promise.resolve(result).catch(reject);
    });
}
//# sourceMappingURL=promise-tools.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/storage.js":
/*!**********************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/storage.js ***!
  \**********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "getItem": function() { return /* binding */ getItem; },
/* harmony export */   "setItem": function() { return /* binding */ setItem; },
/* harmony export */   "removeItem": function() { return /* binding */ removeItem; },
/* harmony export */   "clear": function() { return /* binding */ clear; },
/* harmony export */   "length": function() { return /* binding */ length; },
/* harmony export */   "key": function() { return /* binding */ key; },
/* harmony export */   "keys": function() { return /* binding */ keys; },
/* harmony export */   "iterate": function() { return /* binding */ iterate; }
/* harmony export */ });
/* harmony import */ var _core_sdk_environment__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../core/sdk-environment */ "./node_modules/@magic-sdk/provider/dist/module/core/sdk-environment.js");
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spread = (undefined && undefined.__spread) || function () {
    for (var ar = [], i = 0; i < arguments.length; i++) ar = ar.concat(__read(arguments[i]));
    return ar;
};

var lf;
/**
 * Proxies `localforage` methods with strong-typing.
 */
function proxyLocalForageMethod(method) {
    var _this = this;
    return function () {
        var args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            args[_i] = arguments[_i];
        }
        return __awaiter(_this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!!lf) return [3 /*break*/, 2];
                        return [4 /*yield*/, _core_sdk_environment__WEBPACK_IMPORTED_MODULE_0__.SDKEnvironment.configureStorage()];
                    case 1:
                        lf = _a.sent();
                        _a.label = 2;
                    case 2: return [4 /*yield*/, lf.ready()];
                    case 3:
                        _a.sent();
                        return [2 /*return*/, lf[method].apply(lf, __spread(args))];
                }
            });
        });
    };
}
var getItem = proxyLocalForageMethod('getItem');
var setItem = proxyLocalForageMethod('setItem');
var removeItem = proxyLocalForageMethod('removeItem');
var clear = proxyLocalForageMethod('clear');
var length = proxyLocalForageMethod('length');
var key = proxyLocalForageMethod('key');
var keys = proxyLocalForageMethod('keys');
var iterate = proxyLocalForageMethod('iterate');
//# sourceMappingURL=storage.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/type-guards.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/type-guards.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "isJsonRpcRequestPayload": function() { return /* binding */ isJsonRpcRequestPayload; },
/* harmony export */   "isJsonRpcResponsePayload": function() { return /* binding */ isJsonRpcResponsePayload; },
/* harmony export */   "isMagicPayloadMethod": function() { return /* binding */ isMagicPayloadMethod; },
/* harmony export */   "isJsonRpcErrorCode": function() { return /* binding */ isJsonRpcErrorCode; },
/* harmony export */   "isEmpty": function() { return /* binding */ isEmpty; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");
/**
 * This file contains our type guards.
 *
 * Type guards are a feature of TypeScript which narrow the type signature of
 * intesection types (types that can be one thing or another).
 *
 * @see
 * https://www.typescriptlang.org/docs/handbook/advanced-types.html#type-guards-and-differentiating-types
 */

/**
 * Assert `value` is `undefined`.
 */
function isUndefined(value) {
    return typeof value === 'undefined';
}
/**
 * Assert `value` is `null`.
 */
function isNull(value) {
    return value === null;
}
/**
 * Assert `value` is `null` or `undefined`.
 */
function isNil(value) {
    return isNull(value) || isUndefined(value);
}
/**
 * Assert `value` is a `JsonRpcRequestPayload` object.
 */
function isJsonRpcRequestPayload(value) {
    if (isNil(value))
        return false;
    return (!isUndefined(value.jsonrpc) && !isUndefined(value.id) && !isUndefined(value.method) && !isUndefined(value.params));
}
/**
 * Assert `value` is a `JsonRpcResponsePayload` object.
 */
function isJsonRpcResponsePayload(value) {
    if (isNil(value))
        return false;
    return (!isUndefined(value.jsonrpc) && !isUndefined(value.id) && (!isUndefined(value.result) || !isUndefined(value.error)));
}
/**
 * Assert `value` is a Magic SDK payload method identifier.
 */
function isMagicPayloadMethod(value) {
    if (isNil(value))
        return false;
    return typeof value === 'string' && Object.values(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.MagicPayloadMethod).includes(value);
}
/**
 * Assert `value` is an expected JSON RPC error code.
 */
function isJsonRpcErrorCode(value) {
    if (isNil(value))
        return false;
    return typeof value === 'number' && Object.values(_magic_sdk_types__WEBPACK_IMPORTED_MODULE_0__.RPCErrorCode).includes(value);
}
/**
 * Assert `value` is an empty, plain object.
 */
function isEmpty(value) {
    if (!value)
        return true;
    for (var key in value) {
        /* istanbul ignore else */
        if (Object.hasOwnProperty.call(value, key)) {
            return false;
        }
    }
    return true;
}
//# sourceMappingURL=type-guards.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/url.js":
/*!******************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/url.js ***!
  \******************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "createURL": function() { return /* binding */ createURL; }
/* harmony export */ });
/**
 * Builds a `URL` object safely.
 */
function createURL(url, base) {
    // Safari raises an error if `undefined` is given to the second argument of
    // the `URL` constructor.
    return base ? new URL(url, base) : new URL(url);
}
//# sourceMappingURL=url.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/dist/module/util/webauthn.js":
/*!***********************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/dist/module/util/webauthn.js ***!
  \***********************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "transformNewAssertionForServer": function() { return /* binding */ transformNewAssertionForServer; },
/* harmony export */   "transformAssertionForServer": function() { return /* binding */ transformAssertionForServer; }
/* harmony export */ });
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
/* eslint-disable */
/* istanbul ignore next  */
function fromByteArray(uint8) {
    var i;
    var extraBytes = uint8.length % 3; // if we have 1 byte left, pad 2 bytes
    var output = '';
    var temp;
    var length;
    function encode(num) {
        return lookup.charAt(num);
    }
    function tripletToBase64(num) {
        return encode((num >> 18) & 0x3f) + encode((num >> 12) & 0x3f) + encode((num >> 6) & 0x3f) + encode(num & 0x3f);
    }
    // go through the array every three bytes, we'll deal with trailing stuff later
    for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
        temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + uint8[i + 2];
        output += tripletToBase64(temp);
    }
    // pad the end with zeros, but make sure to not forget the extra bytes
    switch (extraBytes) {
        case 1:
            temp = uint8[uint8.length - 1];
            output += encode(temp >> 2);
            output += encode((temp << 4) & 0x3f);
            output += '==';
            break;
        case 2:
            temp = (uint8[uint8.length - 2] << 8) + uint8[uint8.length - 1];
            output += encode(temp >> 10);
            output += encode((temp >> 4) & 0x3f);
            output += encode((temp << 2) & 0x3f);
            output += '=';
            break;
        default:
            break;
    }
    return output;
}
/* istanbul ignore next  */
function b64enc(buf) {
    return fromByteArray(buf).replace(/\+/g, '-').replace(/\//g, '_').replace(/=/g, '');
}
/* istanbul ignore next  */
function b64RawEnc(buf) {
    return fromByteArray(buf).replace(/\+/g, '-').replace(/\//g, '_');
}
/* istanbul ignore next  */
function hexEncode(buf) {
    return Array.from(buf)
        .map(function (x) {
        return ("0" + x.toString(16)).substr(-2);
    })
        .join('');
}
/**
 * Transforms the binary data in the credential into base64 strings
 * for posting to the server.
 * @param {PublicKeyCredential} newAssertion
 */
/* istanbul ignore next  */
var transformNewAssertionForServer = function (newAssertion) {
    var attObj = new Uint8Array(newAssertion.response.attestationObject);
    var clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);
    var rawId = new Uint8Array(newAssertion.rawId);
    var registrationClientExtensions = newAssertion.getClientExtensionResults();
    return {
        id: newAssertion.id,
        rawId: b64enc(rawId),
        type: newAssertion.type,
        attObj: b64enc(attObj),
        clientData: b64enc(clientDataJSON),
        registrationClientExtensions: JSON.stringify(registrationClientExtensions),
    };
};
/**
 * Encodes the binary data in the assertion into strings for posting to the server.
 * @param {PublicKeyCredential} newAssertion
 */
/* istanbul ignore next  */
var transformAssertionForServer = function (newAssertion) {
    var authData = new Uint8Array(newAssertion.response.authenticatorData);
    var clientDataJSON = new Uint8Array(newAssertion.response.clientDataJSON);
    var rawId = new Uint8Array(newAssertion.rawId);
    var sig = new Uint8Array(newAssertion.response.signature);
    var assertionClientExtensions = newAssertion.getClientExtensionResults();
    return {
        id: newAssertion.id,
        rawId: b64enc(rawId),
        type: newAssertion.type,
        authData: b64RawEnc(authData),
        clientData: b64RawEnc(clientDataJSON),
        signature: hexEncode(sig),
        assertionClientExtensions: JSON.stringify(assertionClientExtensions),
    };
};
//# sourceMappingURL=webauthn.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/eventemitter3/index.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/eventemitter3/index.js ***!
  \******************************************************************************/
/***/ (function(module) {

"use strict";


var has = Object.prototype.hasOwnProperty
  , prefix = '~';

/**
 * Constructor to create a storage for our `EE` objects.
 * An `Events` instance is a plain object whose properties are event names.
 *
 * @constructor
 * @private
 */
function Events() {}

//
// We try to not inherit from `Object.prototype`. In some engines creating an
// instance in this way is faster than calling `Object.create(null)` directly.
// If `Object.create(null)` is not supported we prefix the event names with a
// character to make sure that the built-in object properties are not
// overridden or used as an attack vector.
//
if (Object.create) {
  Events.prototype = Object.create(null);

  //
  // This hack is needed because the `__proto__` property is still inherited in
  // some old browsers like Android 4, iPhone 5.1, Opera 11 and Safari 5.
  //
  if (!new Events().__proto__) prefix = false;
}

/**
 * Representation of a single event listener.
 *
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} [once=false] Specify if the listener is a one-time listener.
 * @constructor
 * @private
 */
function EE(fn, context, once) {
  this.fn = fn;
  this.context = context;
  this.once = once || false;
}

/**
 * Add a listener for a given event.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} context The context to invoke the listener with.
 * @param {Boolean} once Specify if the listener is a one-time listener.
 * @returns {EventEmitter}
 * @private
 */
function addListener(emitter, event, fn, context, once) {
  if (typeof fn !== 'function') {
    throw new TypeError('The listener must be a function');
  }

  var listener = new EE(fn, context || emitter, once)
    , evt = prefix ? prefix + event : event;

  if (!emitter._events[evt]) emitter._events[evt] = listener, emitter._eventsCount++;
  else if (!emitter._events[evt].fn) emitter._events[evt].push(listener);
  else emitter._events[evt] = [emitter._events[evt], listener];

  return emitter;
}

/**
 * Clear event by name.
 *
 * @param {EventEmitter} emitter Reference to the `EventEmitter` instance.
 * @param {(String|Symbol)} evt The Event name.
 * @private
 */
function clearEvent(emitter, evt) {
  if (--emitter._eventsCount === 0) emitter._events = new Events();
  else delete emitter._events[evt];
}

/**
 * Minimal `EventEmitter` interface that is molded against the Node.js
 * `EventEmitter` interface.
 *
 * @constructor
 * @public
 */
function EventEmitter() {
  this._events = new Events();
  this._eventsCount = 0;
}

/**
 * Return an array listing the events for which the emitter has registered
 * listeners.
 *
 * @returns {Array}
 * @public
 */
EventEmitter.prototype.eventNames = function eventNames() {
  var names = []
    , events
    , name;

  if (this._eventsCount === 0) return names;

  for (name in (events = this._events)) {
    if (has.call(events, name)) names.push(prefix ? name.slice(1) : name);
  }

  if (Object.getOwnPropertySymbols) {
    return names.concat(Object.getOwnPropertySymbols(events));
  }

  return names;
};

/**
 * Return the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Array} The registered listeners.
 * @public
 */
EventEmitter.prototype.listeners = function listeners(event) {
  var evt = prefix ? prefix + event : event
    , handlers = this._events[evt];

  if (!handlers) return [];
  if (handlers.fn) return [handlers.fn];

  for (var i = 0, l = handlers.length, ee = new Array(l); i < l; i++) {
    ee[i] = handlers[i].fn;
  }

  return ee;
};

/**
 * Return the number of listeners listening to a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Number} The number of listeners.
 * @public
 */
EventEmitter.prototype.listenerCount = function listenerCount(event) {
  var evt = prefix ? prefix + event : event
    , listeners = this._events[evt];

  if (!listeners) return 0;
  if (listeners.fn) return 1;
  return listeners.length;
};

/**
 * Calls each of the listeners registered for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @returns {Boolean} `true` if the event had listeners, else `false`.
 * @public
 */
EventEmitter.prototype.emit = function emit(event, a1, a2, a3, a4, a5) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return false;

  var listeners = this._events[evt]
    , len = arguments.length
    , args
    , i;

  if (listeners.fn) {
    if (listeners.once) this.removeListener(event, listeners.fn, undefined, true);

    switch (len) {
      case 1: return listeners.fn.call(listeners.context), true;
      case 2: return listeners.fn.call(listeners.context, a1), true;
      case 3: return listeners.fn.call(listeners.context, a1, a2), true;
      case 4: return listeners.fn.call(listeners.context, a1, a2, a3), true;
      case 5: return listeners.fn.call(listeners.context, a1, a2, a3, a4), true;
      case 6: return listeners.fn.call(listeners.context, a1, a2, a3, a4, a5), true;
    }

    for (i = 1, args = new Array(len -1); i < len; i++) {
      args[i - 1] = arguments[i];
    }

    listeners.fn.apply(listeners.context, args);
  } else {
    var length = listeners.length
      , j;

    for (i = 0; i < length; i++) {
      if (listeners[i].once) this.removeListener(event, listeners[i].fn, undefined, true);

      switch (len) {
        case 1: listeners[i].fn.call(listeners[i].context); break;
        case 2: listeners[i].fn.call(listeners[i].context, a1); break;
        case 3: listeners[i].fn.call(listeners[i].context, a1, a2); break;
        case 4: listeners[i].fn.call(listeners[i].context, a1, a2, a3); break;
        default:
          if (!args) for (j = 1, args = new Array(len -1); j < len; j++) {
            args[j - 1] = arguments[j];
          }

          listeners[i].fn.apply(listeners[i].context, args);
      }
    }
  }

  return true;
};

/**
 * Add a listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.on = function on(event, fn, context) {
  return addListener(this, event, fn, context, false);
};

/**
 * Add a one-time listener for a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn The listener function.
 * @param {*} [context=this] The context to invoke the listener with.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.once = function once(event, fn, context) {
  return addListener(this, event, fn, context, true);
};

/**
 * Remove the listeners of a given event.
 *
 * @param {(String|Symbol)} event The event name.
 * @param {Function} fn Only remove the listeners that match this function.
 * @param {*} context Only remove the listeners that have this context.
 * @param {Boolean} once Only remove one-time listeners.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeListener = function removeListener(event, fn, context, once) {
  var evt = prefix ? prefix + event : event;

  if (!this._events[evt]) return this;
  if (!fn) {
    clearEvent(this, evt);
    return this;
  }

  var listeners = this._events[evt];

  if (listeners.fn) {
    if (
      listeners.fn === fn &&
      (!once || listeners.once) &&
      (!context || listeners.context === context)
    ) {
      clearEvent(this, evt);
    }
  } else {
    for (var i = 0, events = [], length = listeners.length; i < length; i++) {
      if (
        listeners[i].fn !== fn ||
        (once && !listeners[i].once) ||
        (context && listeners[i].context !== context)
      ) {
        events.push(listeners[i]);
      }
    }

    //
    // Reset the array, or remove it completely if we have no more listeners.
    //
    if (events.length) this._events[evt] = events.length === 1 ? events[0] : events;
    else clearEvent(this, evt);
  }

  return this;
};

/**
 * Remove all listeners, or those of the specified event.
 *
 * @param {(String|Symbol)} [event] The event name.
 * @returns {EventEmitter} `this`.
 * @public
 */
EventEmitter.prototype.removeAllListeners = function removeAllListeners(event) {
  var evt;

  if (event) {
    evt = prefix ? prefix + event : event;
    if (this._events[evt]) clearEvent(this, evt);
  } else {
    this._events = new Events();
    this._eventsCount = 0;
  }

  return this;
};

//
// Alias methods names because people roll like that.
//
EventEmitter.prototype.off = EventEmitter.prototype.removeListener;
EventEmitter.prototype.addListener = EventEmitter.prototype.on;

//
// Expose the prefix.
//
EventEmitter.prefixed = prefix;

//
// Allow `EventEmitter` to be imported as module namespace.
//
EventEmitter.EventEmitter = EventEmitter;

//
// Expose the module.
//
if (true) {
  module.exports = EventEmitter;
}


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/comparator.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/classes/comparator.js ***!
  \************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const ANY = Symbol('SemVer ANY')
// hoisted class for cyclic dependency
class Comparator {
  static get ANY () {
    return ANY
  }
  constructor (comp, options) {
    options = parseOptions(options)

    if (comp instanceof Comparator) {
      if (comp.loose === !!options.loose) {
        return comp
      } else {
        comp = comp.value
      }
    }

    debug('comparator', comp, options)
    this.options = options
    this.loose = !!options.loose
    this.parse(comp)

    if (this.semver === ANY) {
      this.value = ''
    } else {
      this.value = this.operator + this.semver.version
    }

    debug('comp', this)
  }

  parse (comp) {
    const r = this.options.loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const m = comp.match(r)

    if (!m) {
      throw new TypeError(`Invalid comparator: ${comp}`)
    }

    this.operator = m[1] !== undefined ? m[1] : ''
    if (this.operator === '=') {
      this.operator = ''
    }

    // if it literally is just '>' or '' then allow anything.
    if (!m[2]) {
      this.semver = ANY
    } else {
      this.semver = new SemVer(m[2], this.options.loose)
    }
  }

  toString () {
    return this.value
  }

  test (version) {
    debug('Comparator.test', version, this.options.loose)

    if (this.semver === ANY || version === ANY) {
      return true
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    return cmp(version, this.operator, this.semver, this.options)
  }

  intersects (comp, options) {
    if (!(comp instanceof Comparator)) {
      throw new TypeError('a Comparator is required')
    }

    if (!options || typeof options !== 'object') {
      options = {
        loose: !!options,
        includePrerelease: false
      }
    }

    if (this.operator === '') {
      if (this.value === '') {
        return true
      }
      return new Range(comp.value, options).test(this.value)
    } else if (comp.operator === '') {
      if (comp.value === '') {
        return true
      }
      return new Range(this.value, options).test(comp.semver)
    }

    const sameDirectionIncreasing =
      (this.operator === '>=' || this.operator === '>') &&
      (comp.operator === '>=' || comp.operator === '>')
    const sameDirectionDecreasing =
      (this.operator === '<=' || this.operator === '<') &&
      (comp.operator === '<=' || comp.operator === '<')
    const sameSemVer = this.semver.version === comp.semver.version
    const differentDirectionsInclusive =
      (this.operator === '>=' || this.operator === '<=') &&
      (comp.operator === '>=' || comp.operator === '<=')
    const oppositeDirectionsLessThan =
      cmp(this.semver, '<', comp.semver, options) &&
      (this.operator === '>=' || this.operator === '>') &&
        (comp.operator === '<=' || comp.operator === '<')
    const oppositeDirectionsGreaterThan =
      cmp(this.semver, '>', comp.semver, options) &&
      (this.operator === '<=' || this.operator === '<') &&
        (comp.operator === '>=' || comp.operator === '>')

    return (
      sameDirectionIncreasing ||
      sameDirectionDecreasing ||
      (sameSemVer && differentDirectionsInclusive) ||
      oppositeDirectionsLessThan ||
      oppositeDirectionsGreaterThan
    )
  }
}

module.exports = Comparator

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/parse-options.js")
const {re, t} = __webpack_require__(/*! ../internal/re */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/re.js")
const cmp = __webpack_require__(/*! ../functions/cmp */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/cmp.js")
const debug = __webpack_require__(/*! ../internal/debug */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/debug.js")
const SemVer = __webpack_require__(/*! ./semver */ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/semver.js")
const Range = __webpack_require__(/*! ./range */ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/range.js")


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/range.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/classes/range.js ***!
  \*******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

// hoisted class for cyclic dependency
class Range {
  constructor (range, options) {
    options = parseOptions(options)

    if (range instanceof Range) {
      if (
        range.loose === !!options.loose &&
        range.includePrerelease === !!options.includePrerelease
      ) {
        return range
      } else {
        return new Range(range.raw, options)
      }
    }

    if (range instanceof Comparator) {
      // just put it in the set and return
      this.raw = range.value
      this.set = [[range]]
      this.format()
      return this
    }

    this.options = options
    this.loose = !!options.loose
    this.includePrerelease = !!options.includePrerelease

    // First, split based on boolean or ||
    this.raw = range
    this.set = range
      .split(/\s*\|\|\s*/)
      // map the range to a 2d array of comparators
      .map(range => this.parseRange(range.trim()))
      // throw out any comparator lists that are empty
      // this generally means that it was not a valid range, which is allowed
      // in loose mode, but will still throw if the WHOLE range is invalid.
      .filter(c => c.length)

    if (!this.set.length) {
      throw new TypeError(`Invalid SemVer Range: ${range}`)
    }

    // if we have any that are not the null set, throw out null sets.
    if (this.set.length > 1) {
      // keep the first one, in case they're all null sets
      const first = this.set[0]
      this.set = this.set.filter(c => !isNullSet(c[0]))
      if (this.set.length === 0)
        this.set = [first]
      else if (this.set.length > 1) {
        // if we have any that are *, then the range is just *
        for (const c of this.set) {
          if (c.length === 1 && isAny(c[0])) {
            this.set = [c]
            break
          }
        }
      }
    }

    this.format()
  }

  format () {
    this.range = this.set
      .map((comps) => {
        return comps.join(' ').trim()
      })
      .join('||')
      .trim()
    return this.range
  }

  toString () {
    return this.range
  }

  parseRange (range) {
    range = range.trim()

    // memoize range parsing for performance.
    // this is a very hot path, and fully deterministic.
    const memoOpts = Object.keys(this.options).join(',')
    const memoKey = `parseRange:${memoOpts}:${range}`
    const cached = cache.get(memoKey)
    if (cached)
      return cached

    const loose = this.options.loose
    // `1.2.3 - 1.2.4` => `>=1.2.3 <=1.2.4`
    const hr = loose ? re[t.HYPHENRANGELOOSE] : re[t.HYPHENRANGE]
    range = range.replace(hr, hyphenReplace(this.options.includePrerelease))
    debug('hyphen replace', range)
    // `> 1.2.3 < 1.2.5` => `>1.2.3 <1.2.5`
    range = range.replace(re[t.COMPARATORTRIM], comparatorTrimReplace)
    debug('comparator trim', range, re[t.COMPARATORTRIM])

    // `~ 1.2.3` => `~1.2.3`
    range = range.replace(re[t.TILDETRIM], tildeTrimReplace)

    // `^ 1.2.3` => `^1.2.3`
    range = range.replace(re[t.CARETTRIM], caretTrimReplace)

    // normalize spaces
    range = range.split(/\s+/).join(' ')

    // At this point, the range is completely trimmed and
    // ready to be split into comparators.

    const compRe = loose ? re[t.COMPARATORLOOSE] : re[t.COMPARATOR]
    const rangeList = range
      .split(' ')
      .map(comp => parseComparator(comp, this.options))
      .join(' ')
      .split(/\s+/)
      // >=0.0.0 is equivalent to *
      .map(comp => replaceGTE0(comp, this.options))
      // in loose mode, throw out any that are not valid comparators
      .filter(this.options.loose ? comp => !!comp.match(compRe) : () => true)
      .map(comp => new Comparator(comp, this.options))

    // if any comparators are the null set, then replace with JUST null set
    // if more than one comparator, remove any * comparators
    // also, don't include the same comparator more than once
    const l = rangeList.length
    const rangeMap = new Map()
    for (const comp of rangeList) {
      if (isNullSet(comp))
        return [comp]
      rangeMap.set(comp.value, comp)
    }
    if (rangeMap.size > 1 && rangeMap.has(''))
      rangeMap.delete('')

    const result = [...rangeMap.values()]
    cache.set(memoKey, result)
    return result
  }

  intersects (range, options) {
    if (!(range instanceof Range)) {
      throw new TypeError('a Range is required')
    }

    return this.set.some((thisComparators) => {
      return (
        isSatisfiable(thisComparators, options) &&
        range.set.some((rangeComparators) => {
          return (
            isSatisfiable(rangeComparators, options) &&
            thisComparators.every((thisComparator) => {
              return rangeComparators.every((rangeComparator) => {
                return thisComparator.intersects(rangeComparator, options)
              })
            })
          )
        })
      )
    })
  }

  // if ANY of the sets match ALL of its comparators, then pass
  test (version) {
    if (!version) {
      return false
    }

    if (typeof version === 'string') {
      try {
        version = new SemVer(version, this.options)
      } catch (er) {
        return false
      }
    }

    for (let i = 0; i < this.set.length; i++) {
      if (testSet(this.set[i], version, this.options)) {
        return true
      }
    }
    return false
  }
}
module.exports = Range

const LRU = __webpack_require__(/*! lru-cache */ "./node_modules/lru-cache/index.js")
const cache = new LRU({ max: 1000 })

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/parse-options.js")
const Comparator = __webpack_require__(/*! ./comparator */ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/comparator.js")
const debug = __webpack_require__(/*! ../internal/debug */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/debug.js")
const SemVer = __webpack_require__(/*! ./semver */ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/semver.js")
const {
  re,
  t,
  comparatorTrimReplace,
  tildeTrimReplace,
  caretTrimReplace
} = __webpack_require__(/*! ../internal/re */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/re.js")

const isNullSet = c => c.value === '<0.0.0-0'
const isAny = c => c.value === ''

// take a set of comparators and determine whether there
// exists a version which can satisfy it
const isSatisfiable = (comparators, options) => {
  let result = true
  const remainingComparators = comparators.slice()
  let testComparator = remainingComparators.pop()

  while (result && remainingComparators.length) {
    result = remainingComparators.every((otherComparator) => {
      return testComparator.intersects(otherComparator, options)
    })

    testComparator = remainingComparators.pop()
  }

  return result
}

// comprised of xranges, tildes, stars, and gtlt's at this point.
// already replaced the hyphen ranges
// turn into a set of JUST comparators.
const parseComparator = (comp, options) => {
  debug('comp', comp, options)
  comp = replaceCarets(comp, options)
  debug('caret', comp)
  comp = replaceTildes(comp, options)
  debug('tildes', comp)
  comp = replaceXRanges(comp, options)
  debug('xrange', comp)
  comp = replaceStars(comp, options)
  debug('stars', comp)
  return comp
}

const isX = id => !id || id.toLowerCase() === 'x' || id === '*'

// ~, ~> --> * (any, kinda silly)
// ~2, ~2.x, ~2.x.x, ~>2, ~>2.x ~>2.x.x --> >=2.0.0 <3.0.0-0
// ~2.0, ~2.0.x, ~>2.0, ~>2.0.x --> >=2.0.0 <2.1.0-0
// ~1.2, ~1.2.x, ~>1.2, ~>1.2.x --> >=1.2.0 <1.3.0-0
// ~1.2.3, ~>1.2.3 --> >=1.2.3 <1.3.0-0
// ~1.2.0, ~>1.2.0 --> >=1.2.0 <1.3.0-0
const replaceTildes = (comp, options) =>
  comp.trim().split(/\s+/).map((comp) => {
    return replaceTilde(comp, options)
  }).join(' ')

const replaceTilde = (comp, options) => {
  const r = options.loose ? re[t.TILDELOOSE] : re[t.TILDE]
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('tilde', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0 <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      // ~1.2 == >=1.2.0 <1.3.0-0
      ret = `>=${M}.${m}.0 <${M}.${+m + 1}.0-0`
    } else if (pr) {
      debug('replaceTilde pr', pr)
      ret = `>=${M}.${m}.${p}-${pr
      } <${M}.${+m + 1}.0-0`
    } else {
      // ~1.2.3 == >=1.2.3 <1.3.0-0
      ret = `>=${M}.${m}.${p
      } <${M}.${+m + 1}.0-0`
    }

    debug('tilde return', ret)
    return ret
  })
}

// ^ --> * (any, kinda silly)
// ^2, ^2.x, ^2.x.x --> >=2.0.0 <3.0.0-0
// ^2.0, ^2.0.x --> >=2.0.0 <3.0.0-0
// ^1.2, ^1.2.x --> >=1.2.0 <2.0.0-0
// ^1.2.3 --> >=1.2.3 <2.0.0-0
// ^1.2.0 --> >=1.2.0 <2.0.0-0
const replaceCarets = (comp, options) =>
  comp.trim().split(/\s+/).map((comp) => {
    return replaceCaret(comp, options)
  }).join(' ')

const replaceCaret = (comp, options) => {
  debug('caret', comp, options)
  const r = options.loose ? re[t.CARETLOOSE] : re[t.CARET]
  const z = options.includePrerelease ? '-0' : ''
  return comp.replace(r, (_, M, m, p, pr) => {
    debug('caret', comp, _, M, m, p, pr)
    let ret

    if (isX(M)) {
      ret = ''
    } else if (isX(m)) {
      ret = `>=${M}.0.0${z} <${+M + 1}.0.0-0`
    } else if (isX(p)) {
      if (M === '0') {
        ret = `>=${M}.${m}.0${z} <${M}.${+m + 1}.0-0`
      } else {
        ret = `>=${M}.${m}.0${z} <${+M + 1}.0.0-0`
      }
    } else if (pr) {
      debug('replaceCaret pr', pr)
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p}-${pr
          } <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p}-${pr
        } <${+M + 1}.0.0-0`
      }
    } else {
      debug('no pr')
      if (M === '0') {
        if (m === '0') {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${m}.${+p + 1}-0`
        } else {
          ret = `>=${M}.${m}.${p
          }${z} <${M}.${+m + 1}.0-0`
        }
      } else {
        ret = `>=${M}.${m}.${p
        } <${+M + 1}.0.0-0`
      }
    }

    debug('caret return', ret)
    return ret
  })
}

const replaceXRanges = (comp, options) => {
  debug('replaceXRanges', comp, options)
  return comp.split(/\s+/).map((comp) => {
    return replaceXRange(comp, options)
  }).join(' ')
}

const replaceXRange = (comp, options) => {
  comp = comp.trim()
  const r = options.loose ? re[t.XRANGELOOSE] : re[t.XRANGE]
  return comp.replace(r, (ret, gtlt, M, m, p, pr) => {
    debug('xRange', comp, ret, gtlt, M, m, p, pr)
    const xM = isX(M)
    const xm = xM || isX(m)
    const xp = xm || isX(p)
    const anyX = xp

    if (gtlt === '=' && anyX) {
      gtlt = ''
    }

    // if we're including prereleases in the match, then we need
    // to fix this to -0, the lowest possible prerelease value
    pr = options.includePrerelease ? '-0' : ''

    if (xM) {
      if (gtlt === '>' || gtlt === '<') {
        // nothing is allowed
        ret = '<0.0.0-0'
      } else {
        // nothing is forbidden
        ret = '*'
      }
    } else if (gtlt && anyX) {
      // we know patch is an x, because we have any x at all.
      // replace X with 0
      if (xm) {
        m = 0
      }
      p = 0

      if (gtlt === '>') {
        // >1 => >=2.0.0
        // >1.2 => >=1.3.0
        gtlt = '>='
        if (xm) {
          M = +M + 1
          m = 0
          p = 0
        } else {
          m = +m + 1
          p = 0
        }
      } else if (gtlt === '<=') {
        // <=0.7.x is actually <0.8.0, since any 0.7.x should
        // pass.  Similarly, <=7.x is actually <8.0.0, etc.
        gtlt = '<'
        if (xm) {
          M = +M + 1
        } else {
          m = +m + 1
        }
      }

      if (gtlt === '<')
        pr = '-0'

      ret = `${gtlt + M}.${m}.${p}${pr}`
    } else if (xm) {
      ret = `>=${M}.0.0${pr} <${+M + 1}.0.0-0`
    } else if (xp) {
      ret = `>=${M}.${m}.0${pr
      } <${M}.${+m + 1}.0-0`
    }

    debug('xRange return', ret)

    return ret
  })
}

// Because * is AND-ed with everything else in the comparator,
// and '' means "any version", just remove the *s entirely.
const replaceStars = (comp, options) => {
  debug('replaceStars', comp, options)
  // Looseness is ignored here.  star is always as loose as it gets!
  return comp.trim().replace(re[t.STAR], '')
}

const replaceGTE0 = (comp, options) => {
  debug('replaceGTE0', comp, options)
  return comp.trim()
    .replace(re[options.includePrerelease ? t.GTE0PRE : t.GTE0], '')
}

// This function is passed to string.replace(re[t.HYPHENRANGE])
// M, m, patch, prerelease, build
// 1.2 - 3.4.5 => >=1.2.0 <=3.4.5
// 1.2.3 - 3.4 => >=1.2.0 <3.5.0-0 Any 3.4.x will do
// 1.2 - 3.4 => >=1.2.0 <3.5.0-0
const hyphenReplace = incPr => ($0,
  from, fM, fm, fp, fpr, fb,
  to, tM, tm, tp, tpr, tb) => {
  if (isX(fM)) {
    from = ''
  } else if (isX(fm)) {
    from = `>=${fM}.0.0${incPr ? '-0' : ''}`
  } else if (isX(fp)) {
    from = `>=${fM}.${fm}.0${incPr ? '-0' : ''}`
  } else if (fpr) {
    from = `>=${from}`
  } else {
    from = `>=${from}${incPr ? '-0' : ''}`
  }

  if (isX(tM)) {
    to = ''
  } else if (isX(tm)) {
    to = `<${+tM + 1}.0.0-0`
  } else if (isX(tp)) {
    to = `<${tM}.${+tm + 1}.0-0`
  } else if (tpr) {
    to = `<=${tM}.${tm}.${tp}-${tpr}`
  } else if (incPr) {
    to = `<${tM}.${tm}.${+tp + 1}-0`
  } else {
    to = `<=${to}`
  }

  return (`${from} ${to}`).trim()
}

const testSet = (set, version, options) => {
  for (let i = 0; i < set.length; i++) {
    if (!set[i].test(version)) {
      return false
    }
  }

  if (version.prerelease.length && !options.includePrerelease) {
    // Find the set of versions that are allowed to have prereleases
    // For example, ^1.2.3-pr.1 desugars to >=1.2.3-pr.1 <2.0.0
    // That should allow `1.2.3-pr.2` to pass.
    // However, `1.2.4-alpha.notready` should NOT be allowed,
    // even though it's within the range set by the comparators.
    for (let i = 0; i < set.length; i++) {
      debug(set[i].semver)
      if (set[i].semver === Comparator.ANY) {
        continue
      }

      if (set[i].semver.prerelease.length > 0) {
        const allowed = set[i].semver
        if (allowed.major === version.major &&
            allowed.minor === version.minor &&
            allowed.patch === version.patch) {
          return true
        }
      }
    }

    // Version has a -pre, but it's not one of the ones we like.
    return false
  }

  return true
}


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/semver.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/classes/semver.js ***!
  \********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const debug = __webpack_require__(/*! ../internal/debug */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/debug.js")
const { MAX_LENGTH, MAX_SAFE_INTEGER } = __webpack_require__(/*! ../internal/constants */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/constants.js")
const { re, t } = __webpack_require__(/*! ../internal/re */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/re.js")

const parseOptions = __webpack_require__(/*! ../internal/parse-options */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/parse-options.js")
const { compareIdentifiers } = __webpack_require__(/*! ../internal/identifiers */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/identifiers.js")
class SemVer {
  constructor (version, options) {
    options = parseOptions(options)

    if (version instanceof SemVer) {
      if (version.loose === !!options.loose &&
          version.includePrerelease === !!options.includePrerelease) {
        return version
      } else {
        version = version.version
      }
    } else if (typeof version !== 'string') {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    if (version.length > MAX_LENGTH) {
      throw new TypeError(
        `version is longer than ${MAX_LENGTH} characters`
      )
    }

    debug('SemVer', version, options)
    this.options = options
    this.loose = !!options.loose
    // this isn't actually relevant for versions, but keep it so that we
    // don't run into trouble passing this.options around.
    this.includePrerelease = !!options.includePrerelease

    const m = version.trim().match(options.loose ? re[t.LOOSE] : re[t.FULL])

    if (!m) {
      throw new TypeError(`Invalid Version: ${version}`)
    }

    this.raw = version

    // these are actually numbers
    this.major = +m[1]
    this.minor = +m[2]
    this.patch = +m[3]

    if (this.major > MAX_SAFE_INTEGER || this.major < 0) {
      throw new TypeError('Invalid major version')
    }

    if (this.minor > MAX_SAFE_INTEGER || this.minor < 0) {
      throw new TypeError('Invalid minor version')
    }

    if (this.patch > MAX_SAFE_INTEGER || this.patch < 0) {
      throw new TypeError('Invalid patch version')
    }

    // numberify any prerelease numeric ids
    if (!m[4]) {
      this.prerelease = []
    } else {
      this.prerelease = m[4].split('.').map((id) => {
        if (/^[0-9]+$/.test(id)) {
          const num = +id
          if (num >= 0 && num < MAX_SAFE_INTEGER) {
            return num
          }
        }
        return id
      })
    }

    this.build = m[5] ? m[5].split('.') : []
    this.format()
  }

  format () {
    this.version = `${this.major}.${this.minor}.${this.patch}`
    if (this.prerelease.length) {
      this.version += `-${this.prerelease.join('.')}`
    }
    return this.version
  }

  toString () {
    return this.version
  }

  compare (other) {
    debug('SemVer.compare', this.version, this.options, other)
    if (!(other instanceof SemVer)) {
      if (typeof other === 'string' && other === this.version) {
        return 0
      }
      other = new SemVer(other, this.options)
    }

    if (other.version === this.version) {
      return 0
    }

    return this.compareMain(other) || this.comparePre(other)
  }

  compareMain (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    return (
      compareIdentifiers(this.major, other.major) ||
      compareIdentifiers(this.minor, other.minor) ||
      compareIdentifiers(this.patch, other.patch)
    )
  }

  comparePre (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    // NOT having a prerelease is > having one
    if (this.prerelease.length && !other.prerelease.length) {
      return -1
    } else if (!this.prerelease.length && other.prerelease.length) {
      return 1
    } else if (!this.prerelease.length && !other.prerelease.length) {
      return 0
    }

    let i = 0
    do {
      const a = this.prerelease[i]
      const b = other.prerelease[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  compareBuild (other) {
    if (!(other instanceof SemVer)) {
      other = new SemVer(other, this.options)
    }

    let i = 0
    do {
      const a = this.build[i]
      const b = other.build[i]
      debug('prerelease compare', i, a, b)
      if (a === undefined && b === undefined) {
        return 0
      } else if (b === undefined) {
        return 1
      } else if (a === undefined) {
        return -1
      } else if (a === b) {
        continue
      } else {
        return compareIdentifiers(a, b)
      }
    } while (++i)
  }

  // preminor will bump the version up to the next minor release, and immediately
  // down to pre-release. premajor and prepatch work the same way.
  inc (release, identifier) {
    switch (release) {
      case 'premajor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor = 0
        this.major++
        this.inc('pre', identifier)
        break
      case 'preminor':
        this.prerelease.length = 0
        this.patch = 0
        this.minor++
        this.inc('pre', identifier)
        break
      case 'prepatch':
        // If this is already a prerelease, it will bump to the next version
        // drop any prereleases that might already exist, since they are not
        // relevant at this point.
        this.prerelease.length = 0
        this.inc('patch', identifier)
        this.inc('pre', identifier)
        break
      // If the input is a non-prerelease version, this acts the same as
      // prepatch.
      case 'prerelease':
        if (this.prerelease.length === 0) {
          this.inc('patch', identifier)
        }
        this.inc('pre', identifier)
        break

      case 'major':
        // If this is a pre-major version, bump up to the same major version.
        // Otherwise increment major.
        // 1.0.0-5 bumps to 1.0.0
        // 1.1.0 bumps to 2.0.0
        if (
          this.minor !== 0 ||
          this.patch !== 0 ||
          this.prerelease.length === 0
        ) {
          this.major++
        }
        this.minor = 0
        this.patch = 0
        this.prerelease = []
        break
      case 'minor':
        // If this is a pre-minor version, bump up to the same minor version.
        // Otherwise increment minor.
        // 1.2.0-5 bumps to 1.2.0
        // 1.2.1 bumps to 1.3.0
        if (this.patch !== 0 || this.prerelease.length === 0) {
          this.minor++
        }
        this.patch = 0
        this.prerelease = []
        break
      case 'patch':
        // If this is not a pre-release version, it will increment the patch.
        // If it is a pre-release it will bump up to the same patch version.
        // 1.2.0-5 patches to 1.2.0
        // 1.2.0 patches to 1.2.1
        if (this.prerelease.length === 0) {
          this.patch++
        }
        this.prerelease = []
        break
      // This probably shouldn't be used publicly.
      // 1.0.0 'pre' would become 1.0.0-0 which is the wrong direction.
      case 'pre':
        if (this.prerelease.length === 0) {
          this.prerelease = [0]
        } else {
          let i = this.prerelease.length
          while (--i >= 0) {
            if (typeof this.prerelease[i] === 'number') {
              this.prerelease[i]++
              i = -2
            }
          }
          if (i === -1) {
            // didn't increment anything
            this.prerelease.push(0)
          }
        }
        if (identifier) {
          // 1.2.0-beta.1 bumps to 1.2.0-beta.2,
          // 1.2.0-beta.fooblz or 1.2.0-beta bumps to 1.2.0-beta.0
          if (this.prerelease[0] === identifier) {
            if (isNaN(this.prerelease[1])) {
              this.prerelease = [identifier, 0]
            }
          } else {
            this.prerelease = [identifier, 0]
          }
        }
        break

      default:
        throw new Error(`invalid increment argument: ${release}`)
    }
    this.format()
    this.raw = this.version
    return this
  }
}

module.exports = SemVer


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/cmp.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/cmp.js ***!
  \*******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const eq = __webpack_require__(/*! ./eq */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/eq.js")
const neq = __webpack_require__(/*! ./neq */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/neq.js")
const gt = __webpack_require__(/*! ./gt */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/gt.js")
const gte = __webpack_require__(/*! ./gte */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/gte.js")
const lt = __webpack_require__(/*! ./lt */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/lt.js")
const lte = __webpack_require__(/*! ./lte */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/lte.js")

const cmp = (a, op, b, loose) => {
  switch (op) {
    case '===':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a === b

    case '!==':
      if (typeof a === 'object')
        a = a.version
      if (typeof b === 'object')
        b = b.version
      return a !== b

    case '':
    case '=':
    case '==':
      return eq(a, b, loose)

    case '!=':
      return neq(a, b, loose)

    case '>':
      return gt(a, b, loose)

    case '>=':
      return gte(a, b, loose)

    case '<':
      return lt(a, b, loose)

    case '<=':
      return lte(a, b, loose)

    default:
      throw new TypeError(`Invalid operator: ${op}`)
  }
}
module.exports = cmp


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/compare.js":
/*!***********************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/compare.js ***!
  \***********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const SemVer = __webpack_require__(/*! ../classes/semver */ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/semver.js")
const compare = (a, b, loose) =>
  new SemVer(a, loose).compare(new SemVer(b, loose))

module.exports = compare


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/eq.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/eq.js ***!
  \******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/compare.js")
const eq = (a, b, loose) => compare(a, b, loose) === 0
module.exports = eq


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/gt.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/gt.js ***!
  \******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/compare.js")
const gt = (a, b, loose) => compare(a, b, loose) > 0
module.exports = gt


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/gte.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/gte.js ***!
  \*******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/compare.js")
const gte = (a, b, loose) => compare(a, b, loose) >= 0
module.exports = gte


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/lt.js":
/*!******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/lt.js ***!
  \******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/compare.js")
const lt = (a, b, loose) => compare(a, b, loose) < 0
module.exports = lt


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/lte.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/lte.js ***!
  \*******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/compare.js")
const lte = (a, b, loose) => compare(a, b, loose) <= 0
module.exports = lte


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/neq.js":
/*!*******************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/neq.js ***!
  \*******************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const compare = __webpack_require__(/*! ./compare */ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/compare.js")
const neq = (a, b, loose) => compare(a, b, loose) !== 0
module.exports = neq


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/functions/satisfies.js":
/*!*************************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/functions/satisfies.js ***!
  \*************************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

const Range = __webpack_require__(/*! ../classes/range */ "./node_modules/@magic-sdk/provider/node_modules/semver/classes/range.js")
const satisfies = (version, range, options) => {
  try {
    range = new Range(range, options)
  } catch (er) {
    return false
  }
  return range.test(version)
}
module.exports = satisfies


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/constants.js":
/*!************************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/internal/constants.js ***!
  \************************************************************************************/
/***/ (function(module) {

// Note: this is the semver.org version of the spec that it implements
// Not necessarily the package version of this code.
const SEMVER_SPEC_VERSION = '2.0.0'

const MAX_LENGTH = 256
const MAX_SAFE_INTEGER = Number.MAX_SAFE_INTEGER ||
  /* istanbul ignore next */ 9007199254740991

// Max safe segment length for coercion.
const MAX_SAFE_COMPONENT_LENGTH = 16

module.exports = {
  SEMVER_SPEC_VERSION,
  MAX_LENGTH,
  MAX_SAFE_INTEGER,
  MAX_SAFE_COMPONENT_LENGTH
}


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/debug.js":
/*!********************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/internal/debug.js ***!
  \********************************************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/* provided dependency */ var process = __webpack_require__(/*! process */ "./node_modules/process/browser.js");
const debug = (
  typeof process === 'object' &&
  process.env &&
  process.env.NODE_DEBUG &&
  /\bsemver\b/i.test(process.env.NODE_DEBUG)
) ? (...args) => console.error('SEMVER', ...args)
  : () => {}

module.exports = debug


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/identifiers.js":
/*!**************************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/internal/identifiers.js ***!
  \**************************************************************************************/
/***/ (function(module) {

const numeric = /^[0-9]+$/
const compareIdentifiers = (a, b) => {
  const anum = numeric.test(a)
  const bnum = numeric.test(b)

  if (anum && bnum) {
    a = +a
    b = +b
  }

  return a === b ? 0
    : (anum && !bnum) ? -1
    : (bnum && !anum) ? 1
    : a < b ? -1
    : 1
}

const rcompareIdentifiers = (a, b) => compareIdentifiers(b, a)

module.exports = {
  compareIdentifiers,
  rcompareIdentifiers
}


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/parse-options.js":
/*!****************************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/internal/parse-options.js ***!
  \****************************************************************************************/
/***/ (function(module) {

// parse out just the options we care about so we always get a consistent
// obj with keys in a consistent order.
const opts = ['includePrerelease', 'loose', 'rtl']
const parseOptions = options =>
  !options ? {}
  : typeof options !== 'object' ? { loose: true }
  : opts.filter(k => options[k]).reduce((options, k) => {
    options[k] = true
    return options
  }, {})
module.exports = parseOptions


/***/ }),

/***/ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/re.js":
/*!*****************************************************************************!*\
  !*** ./node_modules/@magic-sdk/provider/node_modules/semver/internal/re.js ***!
  \*****************************************************************************/
/***/ (function(module, exports, __webpack_require__) {

const { MAX_SAFE_COMPONENT_LENGTH } = __webpack_require__(/*! ./constants */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/constants.js")
const debug = __webpack_require__(/*! ./debug */ "./node_modules/@magic-sdk/provider/node_modules/semver/internal/debug.js")
exports = module.exports = {}

// The actual regexps go on exports.re
const re = exports.re = []
const src = exports.src = []
const t = exports.t = {}
let R = 0

const createToken = (name, value, isGlobal) => {
  const index = R++
  debug(index, value)
  t[name] = index
  src[index] = value
  re[index] = new RegExp(value, isGlobal ? 'g' : undefined)
}

// The following Regular Expressions can be used for tokenizing,
// validating, and parsing SemVer version strings.

// ## Numeric Identifier
// A single `0`, or a non-zero digit followed by zero or more digits.

createToken('NUMERICIDENTIFIER', '0|[1-9]\\d*')
createToken('NUMERICIDENTIFIERLOOSE', '[0-9]+')

// ## Non-numeric Identifier
// Zero or more digits, followed by a letter or hyphen, and then zero or
// more letters, digits, or hyphens.

createToken('NONNUMERICIDENTIFIER', '\\d*[a-zA-Z-][a-zA-Z0-9-]*')

// ## Main Version
// Three dot-separated numeric identifiers.

createToken('MAINVERSION', `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})\\.` +
                   `(${src[t.NUMERICIDENTIFIER]})`)

createToken('MAINVERSIONLOOSE', `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})\\.` +
                        `(${src[t.NUMERICIDENTIFIERLOOSE]})`)

// ## Pre-release Version Identifier
// A numeric identifier, or a non-numeric identifier.

createToken('PRERELEASEIDENTIFIER', `(?:${src[t.NUMERICIDENTIFIER]
}|${src[t.NONNUMERICIDENTIFIER]})`)

createToken('PRERELEASEIDENTIFIERLOOSE', `(?:${src[t.NUMERICIDENTIFIERLOOSE]
}|${src[t.NONNUMERICIDENTIFIER]})`)

// ## Pre-release Version
// Hyphen, followed by one or more dot-separated pre-release version
// identifiers.

createToken('PRERELEASE', `(?:-(${src[t.PRERELEASEIDENTIFIER]
}(?:\\.${src[t.PRERELEASEIDENTIFIER]})*))`)

createToken('PRERELEASELOOSE', `(?:-?(${src[t.PRERELEASEIDENTIFIERLOOSE]
}(?:\\.${src[t.PRERELEASEIDENTIFIERLOOSE]})*))`)

// ## Build Metadata Identifier
// Any combination of digits, letters, or hyphens.

createToken('BUILDIDENTIFIER', '[0-9A-Za-z-]+')

// ## Build Metadata
// Plus sign, followed by one or more period-separated build metadata
// identifiers.

createToken('BUILD', `(?:\\+(${src[t.BUILDIDENTIFIER]
}(?:\\.${src[t.BUILDIDENTIFIER]})*))`)

// ## Full Version String
// A main version, followed optionally by a pre-release version and
// build metadata.

// Note that the only major, minor, patch, and pre-release sections of
// the version string are capturing groups.  The build metadata is not a
// capturing group, because it should not ever be used in version
// comparison.

createToken('FULLPLAIN', `v?${src[t.MAINVERSION]
}${src[t.PRERELEASE]}?${
  src[t.BUILD]}?`)

createToken('FULL', `^${src[t.FULLPLAIN]}$`)

// like full, but allows v1.2.3 and =1.2.3, which people do sometimes.
// also, 1.0.0alpha1 (prerelease without the hyphen) which is pretty
// common in the npm registry.
createToken('LOOSEPLAIN', `[v=\\s]*${src[t.MAINVERSIONLOOSE]
}${src[t.PRERELEASELOOSE]}?${
  src[t.BUILD]}?`)

createToken('LOOSE', `^${src[t.LOOSEPLAIN]}$`)

createToken('GTLT', '((?:<|>)?=?)')

// Something like "2.*" or "1.2.x".
// Note that "x.x" is a valid xRange identifer, meaning "any version"
// Only the first item is strictly required.
createToken('XRANGEIDENTIFIERLOOSE', `${src[t.NUMERICIDENTIFIERLOOSE]}|x|X|\\*`)
createToken('XRANGEIDENTIFIER', `${src[t.NUMERICIDENTIFIER]}|x|X|\\*`)

createToken('XRANGEPLAIN', `[v=\\s]*(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:\\.(${src[t.XRANGEIDENTIFIER]})` +
                   `(?:${src[t.PRERELEASE]})?${
                     src[t.BUILD]}?` +
                   `)?)?`)

createToken('XRANGEPLAINLOOSE', `[v=\\s]*(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:\\.(${src[t.XRANGEIDENTIFIERLOOSE]})` +
                        `(?:${src[t.PRERELEASELOOSE]})?${
                          src[t.BUILD]}?` +
                        `)?)?`)

createToken('XRANGE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAIN]}$`)
createToken('XRANGELOOSE', `^${src[t.GTLT]}\\s*${src[t.XRANGEPLAINLOOSE]}$`)

// Coercion.
// Extract anything that could conceivably be a part of a valid semver
createToken('COERCE', `${'(^|[^\\d])' +
              '(\\d{1,'}${MAX_SAFE_COMPONENT_LENGTH}})` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:\\.(\\d{1,${MAX_SAFE_COMPONENT_LENGTH}}))?` +
              `(?:$|[^\\d])`)
createToken('COERCERTL', src[t.COERCE], true)

// Tilde ranges.
// Meaning is "reasonably at or greater than"
createToken('LONETILDE', '(?:~>?)')

createToken('TILDETRIM', `(\\s*)${src[t.LONETILDE]}\\s+`, true)
exports.tildeTrimReplace = '$1~'

createToken('TILDE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAIN]}$`)
createToken('TILDELOOSE', `^${src[t.LONETILDE]}${src[t.XRANGEPLAINLOOSE]}$`)

// Caret ranges.
// Meaning is "at least and backwards compatible with"
createToken('LONECARET', '(?:\\^)')

createToken('CARETTRIM', `(\\s*)${src[t.LONECARET]}\\s+`, true)
exports.caretTrimReplace = '$1^'

createToken('CARET', `^${src[t.LONECARET]}${src[t.XRANGEPLAIN]}$`)
createToken('CARETLOOSE', `^${src[t.LONECARET]}${src[t.XRANGEPLAINLOOSE]}$`)

// A simple gt/lt/eq thing, or just "" to indicate "any version"
createToken('COMPARATORLOOSE', `^${src[t.GTLT]}\\s*(${src[t.LOOSEPLAIN]})$|^$`)
createToken('COMPARATOR', `^${src[t.GTLT]}\\s*(${src[t.FULLPLAIN]})$|^$`)

// An expression to strip any whitespace between the gtlt and the thing
// it modifies, so that `> 1.2.3` ==> `>1.2.3`
createToken('COMPARATORTRIM', `(\\s*)${src[t.GTLT]
}\\s*(${src[t.LOOSEPLAIN]}|${src[t.XRANGEPLAIN]})`, true)
exports.comparatorTrimReplace = '$1$2$3'

// Something like `1.2.3 - 1.2.4`
// Note that these all use the loose form, because they'll be
// checked against either the strict or loose comparator form
// later.
createToken('HYPHENRANGE', `^\\s*(${src[t.XRANGEPLAIN]})` +
                   `\\s+-\\s+` +
                   `(${src[t.XRANGEPLAIN]})` +
                   `\\s*$`)

createToken('HYPHENRANGELOOSE', `^\\s*(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s+-\\s+` +
                        `(${src[t.XRANGEPLAINLOOSE]})` +
                        `\\s*$`)

// Star ranges basically just allow anything at all.
createToken('STAR', '(<|>)?=?\\s*\\*')
// >=0.0.0 is like a star
createToken('GTE0', '^\\s*>=\\s*0\.0\.0\\s*$')
createToken('GTE0PRE', '^\\s*>=\\s*0\.0\.0-0\\s*$')


/***/ }),

/***/ "./node_modules/@magic-sdk/types/dist/module/core/exception-types.js":
/*!***************************************************************************!*\
  !*** ./node_modules/@magic-sdk/types/dist/module/core/exception-types.js ***!
  \***************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "SDKErrorCode": function() { return /* binding */ SDKErrorCode; },
/* harmony export */   "SDKWarningCode": function() { return /* binding */ SDKWarningCode; },
/* harmony export */   "RPCErrorCode": function() { return /* binding */ RPCErrorCode; }
/* harmony export */ });
var SDKErrorCode;
(function (SDKErrorCode) {
    SDKErrorCode["MissingApiKey"] = "MISSING_API_KEY";
    SDKErrorCode["ModalNotReady"] = "MODAL_NOT_READY";
    SDKErrorCode["MalformedResponse"] = "MALFORMED_RESPONSE";
    SDKErrorCode["InvalidArgument"] = "INVALID_ARGUMENT";
    SDKErrorCode["ExtensionNotInitialized"] = "EXTENSION_NOT_INITIALIZED";
    SDKErrorCode["WebAuthnNotSupported"] = "WEBAUTHN_NOT_SUPPORTED";
    SDKErrorCode["IncompatibleExtensions"] = "INCOMPATIBLE_EXTENSIONS";
    SDKErrorCode["WebAuthnCreateCredentialError"] = "WEBAUTHN_CREATE_CREDENTIAL_ERROR";
})(SDKErrorCode || (SDKErrorCode = {}));
var SDKWarningCode;
(function (SDKWarningCode) {
    SDKWarningCode["SyncWeb3Method"] = "SYNC_WEB3_METHOD";
    SDKWarningCode["DuplicateIframe"] = "DUPLICATE_IFRAME";
    SDKWarningCode["ReactNativeEndpointConfiguration"] = "REACT_NATIVE_ENDPOINT_CONFIGURATION";
    SDKWarningCode["DeprecationNotice"] = "DEPRECATION_NOTICE";
})(SDKWarningCode || (SDKWarningCode = {}));
var RPCErrorCode;
(function (RPCErrorCode) {
    // Standard JSON RPC 2.0 Error Codes
    RPCErrorCode[RPCErrorCode["ParseError"] = -32700] = "ParseError";
    RPCErrorCode[RPCErrorCode["InvalidRequest"] = -32600] = "InvalidRequest";
    RPCErrorCode[RPCErrorCode["MethodNotFound"] = -32601] = "MethodNotFound";
    RPCErrorCode[RPCErrorCode["InvalidParams"] = -32602] = "InvalidParams";
    RPCErrorCode[RPCErrorCode["InternalError"] = -32603] = "InternalError";
    // Custom RPC Error Codes
    RPCErrorCode[RPCErrorCode["MagicLinkFailedVerification"] = -10000] = "MagicLinkFailedVerification";
    RPCErrorCode[RPCErrorCode["MagicLinkExpired"] = -10001] = "MagicLinkExpired";
    RPCErrorCode[RPCErrorCode["MagicLinkRateLimited"] = -10002] = "MagicLinkRateLimited";
    RPCErrorCode[RPCErrorCode["MagicLinkInvalidRedirectURL"] = -10006] = "MagicLinkInvalidRedirectURL";
    RPCErrorCode[RPCErrorCode["UserAlreadyLoggedIn"] = -10003] = "UserAlreadyLoggedIn";
    RPCErrorCode[RPCErrorCode["UpdateEmailFailed"] = -10004] = "UpdateEmailFailed";
    RPCErrorCode[RPCErrorCode["UserRequestEditEmail"] = -10005] = "UserRequestEditEmail";
})(RPCErrorCode || (RPCErrorCode = {}));
//# sourceMappingURL=exception-types.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/types/dist/module/core/json-rpc-types.js":
/*!**************************************************************************!*\
  !*** ./node_modules/@magic-sdk/types/dist/module/core/json-rpc-types.js ***!
  \**************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MagicPayloadMethod": function() { return /* binding */ MagicPayloadMethod; }
/* harmony export */ });
// --- Payload methods
/**
 * Enum of JSON RPC methods for interacting with the Magic SDK authentication
 * relayer.
 */
var MagicPayloadMethod;
(function (MagicPayloadMethod) {
    MagicPayloadMethod["LoginWithMagicLink"] = "magic_auth_login_with_magic_link";
    MagicPayloadMethod["LoginWithCredential"] = "magic_auth_login_with_credential";
    MagicPayloadMethod["GetIdToken"] = "magic_auth_get_id_token";
    MagicPayloadMethod["GenerateIdToken"] = "magic_auth_generate_id_token";
    MagicPayloadMethod["GetMetadata"] = "magic_auth_get_metadata";
    MagicPayloadMethod["IsLoggedIn"] = "magic_auth_is_logged_in";
    MagicPayloadMethod["Logout"] = "magic_auth_logout";
    MagicPayloadMethod["UpdateEmail"] = "magic_auth_update_email";
    MagicPayloadMethod["WebAuthnRegistrationStart"] = "magic_auth_webauthn_registration_start";
    MagicPayloadMethod["RegisterWithWebAuth"] = "magic_auth_webauthn_register";
    MagicPayloadMethod["LoginWithWebAuthn"] = "magic_auth_login_with_web_authn";
    MagicPayloadMethod["WebAuthnLoginVerfiy"] = "magic_auth_login_with_webauthn_verify";
    MagicPayloadMethod["GetWebAuthnInfo"] = "magic_user_get_webauthn_credentials";
    MagicPayloadMethod["UpdateWebAuthnInfo"] = "magic_user_update_webauthn";
    MagicPayloadMethod["UnregisterWebAuthDevice"] = "magic_user_unregister_webauthn";
    MagicPayloadMethod["RegisterWebAuthDeviceStart"] = "magic_auth_register_webauthn_device_start";
    MagicPayloadMethod["RegisterWebAuthDevice"] = "magic_auth_register_webauthn_device";
})(MagicPayloadMethod || (MagicPayloadMethod = {}));
//# sourceMappingURL=json-rpc-types.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/types/dist/module/core/message-types.js":
/*!*************************************************************************!*\
  !*** ./node_modules/@magic-sdk/types/dist/module/core/message-types.js ***!
  \*************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "MagicIncomingWindowMessage": function() { return /* binding */ MagicIncomingWindowMessage; },
/* harmony export */   "MagicOutgoingWindowMessage": function() { return /* binding */ MagicOutgoingWindowMessage; }
/* harmony export */ });
var MagicIncomingWindowMessage;
(function (MagicIncomingWindowMessage) {
    MagicIncomingWindowMessage["MAGIC_HANDLE_RESPONSE"] = "MAGIC_HANDLE_RESPONSE";
    MagicIncomingWindowMessage["MAGIC_OVERLAY_READY"] = "MAGIC_OVERLAY_READY";
    MagicIncomingWindowMessage["MAGIC_SHOW_OVERLAY"] = "MAGIC_SHOW_OVERLAY";
    MagicIncomingWindowMessage["MAGIC_HIDE_OVERLAY"] = "MAGIC_HIDE_OVERLAY";
    MagicIncomingWindowMessage["MAGIC_HANDLE_EVENT"] = "MAGIC_HANDLE_EVENT";
})(MagicIncomingWindowMessage || (MagicIncomingWindowMessage = {}));
var MagicOutgoingWindowMessage;
(function (MagicOutgoingWindowMessage) {
    MagicOutgoingWindowMessage["MAGIC_HANDLE_REQUEST"] = "MAGIC_HANDLE_REQUEST";
})(MagicOutgoingWindowMessage || (MagicOutgoingWindowMessage = {}));
//# sourceMappingURL=message-types.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/types/dist/module/index.js":
/*!************************************************************!*\
  !*** ./node_modules/@magic-sdk/types/dist/module/index.js ***!
  \************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony import */ var _core_json_rpc_types__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./core/json-rpc-types */ "./node_modules/@magic-sdk/types/dist/module/core/json-rpc-types.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _core_json_rpc_types__WEBPACK_IMPORTED_MODULE_0__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _core_json_rpc_types__WEBPACK_IMPORTED_MODULE_0__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _core_message_types__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ./core/message-types */ "./node_modules/@magic-sdk/types/dist/module/core/message-types.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _core_message_types__WEBPACK_IMPORTED_MODULE_1__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _core_message_types__WEBPACK_IMPORTED_MODULE_1__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _core_exception_types__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./core/exception-types */ "./node_modules/@magic-sdk/types/dist/module/core/exception-types.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _core_exception_types__WEBPACK_IMPORTED_MODULE_2__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _core_exception_types__WEBPACK_IMPORTED_MODULE_2__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* harmony import */ var _modules_rpc_provider_types__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./modules/rpc-provider-types */ "./node_modules/@magic-sdk/types/dist/module/modules/rpc-provider-types.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _modules_rpc_provider_types__WEBPACK_IMPORTED_MODULE_3__) if(__WEBPACK_IMPORT_KEY__ !== "default") __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _modules_rpc_provider_types__WEBPACK_IMPORTED_MODULE_3__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
// Only re-export types that are intended for the public API from this file.




//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/@magic-sdk/types/dist/module/modules/rpc-provider-types.js":
/*!*********************************************************************************!*\
  !*** ./node_modules/@magic-sdk/types/dist/module/modules/rpc-provider-types.js ***!
  \*********************************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "EthChainType": function() { return /* binding */ EthChainType; }
/* harmony export */ });
var EthChainType;
(function (EthChainType) {
    EthChainType["Harmony"] = "HARMONY";
})(EthChainType || (EthChainType = {}));
//# sourceMappingURL=rpc-provider-types.js.map

/***/ }),

/***/ "./node_modules/localforage-driver-memory/_bundle/umd.js":
/*!***************************************************************!*\
  !*** ./node_modules/localforage-driver-memory/_bundle/umd.js ***!
  \***************************************************************/
/***/ (function(__unused_webpack_module, exports) {

/*!
MIT License

Copyright (c) 2018 Arturas Molcanovas <a.molcanovas@gmail.com>

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.

*/


(function (global, factory) {
     true ? factory(exports) :
    0;
}(typeof self !== 'undefined' ? self : this, function (exports) { 'use strict';

    var _driver = 'localforage-driver-memory';

    /*! *****************************************************************************
    Copyright (c) Microsoft Corporation. All rights reserved.
    Licensed under the Apache License, Version 2.0 (the "License"); you may not use
    this file except in compliance with the License. You may obtain a copy of the
    License at http://www.apache.org/licenses/LICENSE-2.0

    THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
    WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
    MERCHANTABLITY OR NON-INFRINGEMENT.

    See the Apache Version 2.0 License for specific language governing permissions
    and limitations under the License.
    ***************************************************************************** */

    function __values(o) {
        var m = typeof Symbol === "function" && o[Symbol.iterator], i = 0;
        if (m) return m.call(o);
        return {
            next: function () {
                if (o && i >= o.length) o = void 0;
                return { value: o && o[i++], done: !o };
            }
        };
    }

    /*!
    MIT License

    Copyright (c) 2018 Arturas Molcanovas <a.molcanovas@gmail.com>

    Permission is hereby granted, free of charge, to any person obtaining a copy
    of this software and associated documentation files (the "Software"), to deal
    in the Software without restriction, including without limitation the rights
    to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
    copies of the Software, and to permit persons to whom the Software is
    furnished to do so, subject to the following conditions:

    The above copyright notice and this permission notice shall be included in all
    copies or substantial portions of the Software.

    THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
    IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
    FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
    AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
    LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
    OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
    SOFTWARE.

    */

    /**
     * Abstracts constructing a Blob object, so it also works in older
     * browsers that don't support the native Blob constructor. (i.e.
     * old QtWebKit versions, at least).
     * Abstracts constructing a Blob object, so it also works in older
     * browsers that don't support the native Blob constructor. (i.e.
     * old QtWebKit versions, at least).
     *
     * @param parts
     * @param properties
     */
    function createBlob(parts, properties) {
        /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
        parts = parts || [];
        properties = properties || {};
        try {
            return new Blob(parts, properties);
        }
        catch (e) {
            if (e.name !== 'TypeError') {
                throw e;
            }
            //tslint:disable-next-line:variable-name
            var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder
                : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder
                    : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder
                        : WebKitBlobBuilder;
            var builder = new Builder();
            for (var i = 0; i < parts.length; i += 1) {
                builder.append(parts[i]);
            }
            return builder.getBlob(properties.type);
        }
    }

    var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;
    var SERIALIZED_MARKER_LENGTH = "__lfsc__:" /* SERIALIZED_MARKER */.length;
    var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + "arbf" /* TYPE_ARRAYBUFFER */.length;
    //tslint:disable:no-magic-numbers no-bitwise prefer-switch no-unbound-method
    var toString = Object.prototype.toString;
    function stringToBuffer(serializedString) {
        // Fill the string into a ArrayBuffer.
        var bufferLength = serializedString.length * 0.75;
        var len = serializedString.length;
        if (serializedString[serializedString.length - 1] === '=') {
            bufferLength--;
            if (serializedString[serializedString.length - 2] === '=') {
                bufferLength--;
            }
        }
        var buffer = new ArrayBuffer(bufferLength);
        var bytes = new Uint8Array(buffer);
        for (var i = 0, p = 0; i < len; i += 4) {
            var encoded1 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */.indexOf(serializedString[i]);
            var encoded2 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */.indexOf(serializedString[i + 1]);
            var encoded3 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */.indexOf(serializedString[i + 2]);
            var encoded4 = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */.indexOf(serializedString[i + 3]);
            bytes[p++] = (encoded1 << 2) | (encoded2 >> 4);
            bytes[p++] = ((encoded2 & 15) << 4) | (encoded3 >> 2);
            bytes[p++] = ((encoded3 & 3) << 6) | (encoded4 & 63);
        }
        return buffer;
    }
    /**
     * Converts a buffer to a string to store, serialized, in the backend
     * storage library.
     */
    function bufferToString(buffer) {
        // base64-arraybuffer
        var bytes = new Uint8Array(buffer);
        var base64String = '';
        for (var i = 0; i < bytes.length; i += 3) {
            /*jslint bitwise: true */
            base64String += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */[bytes[i] >> 2];
            base64String += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */[((bytes[i] & 3) << 4) | (bytes[i + 1] >> 4)];
            base64String +=
                "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */[((bytes[i + 1] & 15) << 2) | (bytes[i + 2] >> 6)];
            base64String += "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/" /* BASE_CHARS */[bytes[i + 2] & 63];
        }
        if (bytes.length % 3 === 2) {
            base64String = base64String.substring(0, base64String.length - 1) + '=';
        }
        else if (bytes.length % 3 === 1) {
            base64String = base64String.substring(0, base64String.length - 2) + '==';
        }
        return base64String;
    }
    /**
     * Serialize a value, afterwards executing a callback (which usually
     * instructs the `setItem()` callback/promise to be executed). This is how
     * we store binary data with localStorage.
     * @param value
     * @param callback
     */
    function serialize(value, callback) {
        var valueType = '';
        if (value) {
            valueType = toString.call(value);
        }
        // Cannot use `value instanceof ArrayBuffer` or such here, as these
        // checks fail when running the tests using casper.js...
        if (value && (valueType === '[object ArrayBuffer]' ||
            (value.buffer && toString.call(value.buffer) === '[object ArrayBuffer]'))) {
            // Convert binary arrays to a string and prefix the string with
            // a special marker.
            var buffer = void 0;
            var marker = "__lfsc__:" /* SERIALIZED_MARKER */;
            if (value instanceof ArrayBuffer) {
                buffer = value;
                marker += "arbf" /* TYPE_ARRAYBUFFER */;
            }
            else {
                buffer = value.buffer;
                if (valueType === '[object Int8Array]') {
                    marker += "si08" /* TYPE_INT8ARRAY */;
                }
                else if (valueType === '[object Uint8Array]') {
                    marker += "ui08" /* TYPE_UINT8ARRAY */;
                }
                else if (valueType === '[object Uint8ClampedArray]') {
                    marker += "uic8" /* TYPE_UINT8CLAMPEDARRAY */;
                }
                else if (valueType === '[object Int16Array]') {
                    marker += "si16" /* TYPE_INT16ARRAY */;
                }
                else if (valueType === '[object Uint16Array]') {
                    marker += "ur16" /* TYPE_UINT16ARRAY */;
                }
                else if (valueType === '[object Int32Array]') {
                    marker += "si32" /* TYPE_INT32ARRAY */;
                }
                else if (valueType === '[object Uint32Array]') {
                    marker += "ui32" /* TYPE_UINT32ARRAY */;
                }
                else if (valueType === '[object Float32Array]') {
                    marker += "fl32" /* TYPE_FLOAT32ARRAY */;
                }
                else if (valueType === '[object Float64Array]') {
                    marker += "fl64" /* TYPE_FLOAT64ARRAY */;
                }
                else {
                    callback(new Error('Failed to get type for BinaryArray'));
                }
            }
            callback(marker + bufferToString(buffer));
        }
        else if (valueType === '[object Blob]') {
            // Convert the blob to a binaryArray and then to a string.
            var fileReader = new FileReader();
            fileReader.onload = function () {
                // Backwards-compatible prefix for the blob type.
                //tslint:disable-next-line:restrict-plus-operands
                var str = "~~local_forage_type~" /* BLOB_TYPE_PREFIX */ + value.type + "~" + bufferToString(this.result);
                callback("__lfsc__:" /* SERIALIZED_MARKER */ + "blob" /* TYPE_BLOB */ + str);
            };
            fileReader.readAsArrayBuffer(value);
        }
        else {
            try {
                callback(JSON.stringify(value));
            }
            catch (e) {
                console.error('Couldn\'t convert value into a JSON string: ', value);
                callback(null, e);
            }
        }
    }
    /**
     * Deserialize data we've inserted into a value column/field. We place
     * special markers into our strings to mark them as encoded; this isn't
     * as nice as a meta field, but it's the only sane thing we can do whilst
     * keeping localStorage support intact.
     *
     * Oftentimes this will just deserialize JSON content, but if we have a
     * special marker (SERIALIZED_MARKER, defined above), we will extract
     * some kind of arraybuffer/binary data/typed array out of the string.
     * @param value
     */
    function deserialize(value) {
        // If we haven't marked this string as being specially serialized (i.e.
        // something other than serialized JSON), we can just return it and be
        // done with it.
        if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== "__lfsc__:" /* SERIALIZED_MARKER */) {
            return JSON.parse(value);
        }
        // The following code deals with deserializing some kind of Blob or
        // TypedArray. First we separate out the type of data we're dealing
        // with from the data itself.
        var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
        var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);
        var blobType;
        // Backwards-compatible blob type serialization strategy.
        // DBs created with older versions of localForage will simply not have the blob type.
        if (type === "blob" /* TYPE_BLOB */ && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
            var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
            blobType = matcher[1];
            serializedString = serializedString.substring(matcher[0].length);
        }
        var buffer = stringToBuffer(serializedString);
        // Return the right type based on the code/type set during
        // serialization.
        switch (type) {
            case "arbf" /* TYPE_ARRAYBUFFER */:
                return buffer;
            case "blob" /* TYPE_BLOB */:
                return createBlob([buffer], { type: blobType });
            case "si08" /* TYPE_INT8ARRAY */:
                return new Int8Array(buffer);
            case "ui08" /* TYPE_UINT8ARRAY */:
                return new Uint8Array(buffer);
            case "uic8" /* TYPE_UINT8CLAMPEDARRAY */:
                return new Uint8ClampedArray(buffer);
            case "si16" /* TYPE_INT16ARRAY */:
                return new Int16Array(buffer);
            case "ur16" /* TYPE_UINT16ARRAY */:
                return new Uint16Array(buffer);
            case "si32" /* TYPE_INT32ARRAY */:
                return new Int32Array(buffer);
            case "ui32" /* TYPE_UINT32ARRAY */:
                return new Uint32Array(buffer);
            case "fl32" /* TYPE_FLOAT32ARRAY */:
                return new Float32Array(buffer);
            case "fl64" /* TYPE_FLOAT64ARRAY */:
                return new Float64Array(buffer);
            default:
                throw new Error('Unkown type: ' + type);
        }
    }

    function clone(obj) {
        var e_1, _a;
        if (obj === null || typeof (obj) !== 'object' || 'isActiveClone' in obj) {
            return obj;
        }
        var temp = obj instanceof Date ? new Date(obj) : (obj.constructor());
        try {
            for (var _b = __values(Object.keys(obj)), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                if (Object.prototype.hasOwnProperty.call(obj, key)) {
                    obj['isActiveClone'] = null;
                    temp[key] = clone(obj[key]);
                    delete obj['isActiveClone'];
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return temp;
    }

    function getKeyPrefix(options, defaultConfig) {
        return (options.name || defaultConfig.name) + "/" + (options.storeName || defaultConfig.storeName) + "/";
    }

    function executeCallback(promise, callback) {
        if (callback) {
            promise.then(function (result) {
                callback(null, result);
            }, function (error) {
                callback(error);
            });
        }
    }

    function getCallback() {
        var _args = [];
        for (var _i = 0; _i < arguments.length; _i++) {
            _args[_i] = arguments[_i];
        }
        if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
            return arguments[arguments.length - 1];
        }
    }

    //tslint:disable-next-line:no-ignored-initial-value
    function dropInstanceCommon(options, callback) {
        var _this = this;
        callback = getCallback.apply(this, arguments);
        options = (typeof options !== 'function' && options) || {};
        if (!options.name) {
            var currentConfig = this.config();
            options.name = options.name || currentConfig.name;
            options.storeName = options.storeName || currentConfig.storeName;
        }
        var promise;
        if (!options.name) {
            promise = Promise.reject('Invalid arguments');
        }
        else {
            promise = new Promise(function (resolve) {
                if (!options.storeName) {
                    resolve(options.name + "/");
                }
                else {
                    resolve(getKeyPrefix(options, _this._defaultConfig));
                }
            });
        }
        return { promise: promise, callback: callback };
    }

    function normaliseKey(key) {
        // Cast the key to a string, as that's all we can set as a key.
        if (typeof key !== 'string') {
            console.warn(key + " used as a key, but it is not a string.");
            key = String(key);
        }
        return key;
    }

    var serialiser = {
        bufferToString: bufferToString,
        deserialize: deserialize,
        serialize: serialize,
        stringToBuffer: stringToBuffer
    };

    var stores = {};
    /** @internal */
    var Store = /** @class */ (function () {
        function Store(kp) {
            this.kp = kp;
            this.data = {};
        }
        Store.resolve = function (kp) {
            if (!stores[kp]) {
                stores[kp] = new Store(kp);
            }
            return stores[kp];
        };
        Store.prototype.clear = function () {
            this.data = {};
        };
        Store.prototype.drop = function () {
            this.clear();
            delete stores[this.kp];
        };
        Store.prototype.get = function (key) {
            return this.data[key];
        };
        Store.prototype.key = function (idx) {
            return this.keys()[idx];
        };
        Store.prototype.keys = function () {
            return Object.keys(this.data);
        };
        Store.prototype.rm = function (k) {
            delete this.data[k];
        };
        Store.prototype.set = function (k, v) {
            this.data[k] = v;
        };
        return Store;
    }());

    function _initStorage(options) {
        var opts = options ? clone(options) : {};
        var kp = getKeyPrefix(opts, this._defaultConfig);
        var store = Store.resolve(kp);
        this._dbInfo = opts;
        this._dbInfo.serializer = serialiser;
        this._dbInfo.keyPrefix = kp;
        this._dbInfo.mStore = store;
        return Promise.resolve();
    }

    function clear(callback) {
        var _this = this;
        var promise = this.ready().then(function () {
            _this._dbInfo.mStore.clear();
        });
        executeCallback(promise, callback);
        return promise;
    }

    function dropInstance(_options, _cb) {
        var _a = dropInstanceCommon.apply(this, arguments), promise = _a.promise, callback = _a.callback;
        var outPromise = promise.then(function (keyPrefix) {
            Store.resolve(keyPrefix).drop();
        });
        executeCallback(outPromise, callback);
        return promise;
    }

    function getItem(key$, callback) {
        var _this = this;
        key$ = normaliseKey(key$);
        var promise = this.ready().then(function () {
            var result = _this._dbInfo.mStore.get(key$);
            // Deserialise if the result is not null or undefined
            return result == null ? null : _this._dbInfo.serializer.deserialize(result); //tslint:disable-line:triple-equals
        });
        executeCallback(promise, callback);
        return promise;
    }

    function iterate(iterator, callback) {
        var _this = this;
        var promise = this.ready().then(function () {
            var store = _this._dbInfo.mStore;
            var keys = store.keys();
            for (var i = 0; i < keys.length; i++) {
                var value = store.get(keys[i]);
                // If a result was found, parse it from the serialized
                // string into a JS object. If result isn't truthy, the
                // key is likely undefined and we'll pass it straight
                // to the iterator.
                if (value) {
                    value = _this._dbInfo.serializer.deserialize(value);
                }
                value = iterator(value, keys[i], i + 1);
                if (value !== undefined) {
                    return value;
                }
            }
        });
        executeCallback(promise, callback);
        return promise;
    }

    function key(idx, callback) {
        var _this = this;
        var promise = this.ready().then(function () {
            var result;
            try {
                result = _this._dbInfo.mStore.key(idx);
                if (result === undefined) {
                    result = null;
                }
            }
            catch (_a) {
                result = null;
            }
            return result;
        });
        executeCallback(promise, callback);
        return promise;
    }

    function keys(callback) {
        var _this = this;
        var promise = this.ready().then(function () {
            return _this._dbInfo.mStore.keys();
        });
        executeCallback(promise, callback);
        return promise;
    }

    function length(callback) {
        var promise = this.keys().then(function (keys$) { return keys$.length; });
        executeCallback(promise, callback);
        return promise;
    }

    function removeItem(key$, callback) {
        var _this = this;
        key$ = normaliseKey(key$);
        var promise = this.ready().then(function () {
            _this._dbInfo.mStore.rm(key$);
        });
        executeCallback(promise, callback);
        return promise;
    }

    function setItem(key$, value, callback) {
        var _this = this;
        key$ = normaliseKey(key$);
        var promise = this.ready().then(function () {
            if (value === undefined) {
                value = null;
            }
            // Save the original value to pass to the callback.
            var originalValue = value;
            return new Promise(function (resolve, reject) {
                _this._dbInfo.serializer.serialize(value, function (value$, error) {
                    if (error) {
                        reject(error);
                    }
                    else {
                        try {
                            _this._dbInfo.mStore.set(key$, value$);
                            resolve(originalValue);
                        }
                        catch (e) {
                            reject(e);
                        }
                    }
                });
            });
        });
        executeCallback(promise, callback);
        return promise;
    }

    var _support = true;

    exports._support = _support;
    exports._driver = _driver;
    exports._initStorage = _initStorage;
    exports.clear = clear;
    exports.dropInstance = dropInstance;
    exports.getItem = getItem;
    exports.iterate = iterate;
    exports.key = key;
    exports.keys = keys;
    exports.length = length;
    exports.removeItem = removeItem;
    exports.setItem = setItem;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
//# sourceMappingURL=umd.js.map


/***/ }),

/***/ "./node_modules/localforage/dist/localforage.js":
/*!******************************************************!*\
  !*** ./node_modules/localforage/dist/localforage.js ***!
  \******************************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

/*!
    localForage -- Offline Storage, Improved
    Version 1.10.0
    https://localforage.github.io/localForage
    (c) 2013-2017 Mozilla, Apache License 2.0
*/
(function(f){if(true){module.exports=f()}else { var g; }})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=undefined;if(!u&&a)return require(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw (f.code="MODULE_NOT_FOUND", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=undefined;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){
(function (global){
'use strict';
var Mutation = global.MutationObserver || global.WebKitMutationObserver;

var scheduleDrain;

{
  if (Mutation) {
    var called = 0;
    var observer = new Mutation(nextTick);
    var element = global.document.createTextNode('');
    observer.observe(element, {
      characterData: true
    });
    scheduleDrain = function () {
      element.data = (called = ++called % 2);
    };
  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {
    var channel = new global.MessageChannel();
    channel.port1.onmessage = nextTick;
    scheduleDrain = function () {
      channel.port2.postMessage(0);
    };
  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {
    scheduleDrain = function () {

      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted
      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.
      var scriptEl = global.document.createElement('script');
      scriptEl.onreadystatechange = function () {
        nextTick();

        scriptEl.onreadystatechange = null;
        scriptEl.parentNode.removeChild(scriptEl);
        scriptEl = null;
      };
      global.document.documentElement.appendChild(scriptEl);
    };
  } else {
    scheduleDrain = function () {
      setTimeout(nextTick, 0);
    };
  }
}

var draining;
var queue = [];
//named nextTick for less confusing stack traces
function nextTick() {
  draining = true;
  var i, oldQueue;
  var len = queue.length;
  while (len) {
    oldQueue = queue;
    queue = [];
    i = -1;
    while (++i < len) {
      oldQueue[i]();
    }
    len = queue.length;
  }
  draining = false;
}

module.exports = immediate;
function immediate(task) {
  if (queue.push(task) === 1 && !draining) {
    scheduleDrain();
  }
}

}).call(this,typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{}],2:[function(_dereq_,module,exports){
'use strict';
var immediate = _dereq_(1);

/* istanbul ignore next */
function INTERNAL() {}

var handlers = {};

var REJECTED = ['REJECTED'];
var FULFILLED = ['FULFILLED'];
var PENDING = ['PENDING'];

module.exports = Promise;

function Promise(resolver) {
  if (typeof resolver !== 'function') {
    throw new TypeError('resolver must be a function');
  }
  this.state = PENDING;
  this.queue = [];
  this.outcome = void 0;
  if (resolver !== INTERNAL) {
    safelyResolveThenable(this, resolver);
  }
}

Promise.prototype["catch"] = function (onRejected) {
  return this.then(null, onRejected);
};
Promise.prototype.then = function (onFulfilled, onRejected) {
  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||
    typeof onRejected !== 'function' && this.state === REJECTED) {
    return this;
  }
  var promise = new this.constructor(INTERNAL);
  if (this.state !== PENDING) {
    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;
    unwrap(promise, resolver, this.outcome);
  } else {
    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));
  }

  return promise;
};
function QueueItem(promise, onFulfilled, onRejected) {
  this.promise = promise;
  if (typeof onFulfilled === 'function') {
    this.onFulfilled = onFulfilled;
    this.callFulfilled = this.otherCallFulfilled;
  }
  if (typeof onRejected === 'function') {
    this.onRejected = onRejected;
    this.callRejected = this.otherCallRejected;
  }
}
QueueItem.prototype.callFulfilled = function (value) {
  handlers.resolve(this.promise, value);
};
QueueItem.prototype.otherCallFulfilled = function (value) {
  unwrap(this.promise, this.onFulfilled, value);
};
QueueItem.prototype.callRejected = function (value) {
  handlers.reject(this.promise, value);
};
QueueItem.prototype.otherCallRejected = function (value) {
  unwrap(this.promise, this.onRejected, value);
};

function unwrap(promise, func, value) {
  immediate(function () {
    var returnValue;
    try {
      returnValue = func(value);
    } catch (e) {
      return handlers.reject(promise, e);
    }
    if (returnValue === promise) {
      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));
    } else {
      handlers.resolve(promise, returnValue);
    }
  });
}

handlers.resolve = function (self, value) {
  var result = tryCatch(getThen, value);
  if (result.status === 'error') {
    return handlers.reject(self, result.value);
  }
  var thenable = result.value;

  if (thenable) {
    safelyResolveThenable(self, thenable);
  } else {
    self.state = FULFILLED;
    self.outcome = value;
    var i = -1;
    var len = self.queue.length;
    while (++i < len) {
      self.queue[i].callFulfilled(value);
    }
  }
  return self;
};
handlers.reject = function (self, error) {
  self.state = REJECTED;
  self.outcome = error;
  var i = -1;
  var len = self.queue.length;
  while (++i < len) {
    self.queue[i].callRejected(error);
  }
  return self;
};

function getThen(obj) {
  // Make sure we only access the accessor once as required by the spec
  var then = obj && obj.then;
  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {
    return function appyThen() {
      then.apply(obj, arguments);
    };
  }
}

function safelyResolveThenable(self, thenable) {
  // Either fulfill, reject or reject with error
  var called = false;
  function onError(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.reject(self, value);
  }

  function onSuccess(value) {
    if (called) {
      return;
    }
    called = true;
    handlers.resolve(self, value);
  }

  function tryToUnwrap() {
    thenable(onSuccess, onError);
  }

  var result = tryCatch(tryToUnwrap);
  if (result.status === 'error') {
    onError(result.value);
  }
}

function tryCatch(func, value) {
  var out = {};
  try {
    out.value = func(value);
    out.status = 'success';
  } catch (e) {
    out.status = 'error';
    out.value = e;
  }
  return out;
}

Promise.resolve = resolve;
function resolve(value) {
  if (value instanceof this) {
    return value;
  }
  return handlers.resolve(new this(INTERNAL), value);
}

Promise.reject = reject;
function reject(reason) {
  var promise = new this(INTERNAL);
  return handlers.reject(promise, reason);
}

Promise.all = all;
function all(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var values = new Array(len);
  var resolved = 0;
  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    allResolver(iterable[i], i);
  }
  return promise;
  function allResolver(value, i) {
    self.resolve(value).then(resolveFromAll, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
    function resolveFromAll(outValue) {
      values[i] = outValue;
      if (++resolved === len && !called) {
        called = true;
        handlers.resolve(promise, values);
      }
    }
  }
}

Promise.race = race;
function race(iterable) {
  var self = this;
  if (Object.prototype.toString.call(iterable) !== '[object Array]') {
    return this.reject(new TypeError('must be an array'));
  }

  var len = iterable.length;
  var called = false;
  if (!len) {
    return this.resolve([]);
  }

  var i = -1;
  var promise = new this(INTERNAL);

  while (++i < len) {
    resolver(iterable[i]);
  }
  return promise;
  function resolver(value) {
    self.resolve(value).then(function (response) {
      if (!called) {
        called = true;
        handlers.resolve(promise, response);
      }
    }, function (error) {
      if (!called) {
        called = true;
        handlers.reject(promise, error);
      }
    });
  }
}

},{"1":1}],3:[function(_dereq_,module,exports){
(function (global){
'use strict';
if (typeof global.Promise !== 'function') {
  global.Promise = _dereq_(2);
}

}).call(this,typeof __webpack_require__.g !== "undefined" ? __webpack_require__.g : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})
},{"2":2}],4:[function(_dereq_,module,exports){
'use strict';

var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function getIDB() {
    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */
    try {
        if (typeof indexedDB !== 'undefined') {
            return indexedDB;
        }
        if (typeof webkitIndexedDB !== 'undefined') {
            return webkitIndexedDB;
        }
        if (typeof mozIndexedDB !== 'undefined') {
            return mozIndexedDB;
        }
        if (typeof OIndexedDB !== 'undefined') {
            return OIndexedDB;
        }
        if (typeof msIndexedDB !== 'undefined') {
            return msIndexedDB;
        }
    } catch (e) {
        return;
    }
}

var idb = getIDB();

function isIndexedDBValid() {
    try {
        // Initialize IndexedDB; fall back to vendor-prefixed versions
        // if needed.
        if (!idb || !idb.open) {
            return false;
        }
        // We mimic PouchDB here;
        //
        // We test for openDatabase because IE Mobile identifies itself
        // as Safari. Oh the lulz...
        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);

        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;

        // Safari <10.1 does not meet our requirements for IDB support
        // (see: https://github.com/pouchdb/pouchdb/issues/5572).
        // Safari 10.1 shipped with fetch, we can use that to detect it.
        // Note: this creates issues with `window.fetch` polyfills and
        // overrides; see:
        // https://github.com/localForage/localForage/issues/856
        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&
        // some outdated implementations of IDB that appear on Samsung
        // and HTC Android devices <4.4 are missing IDBKeyRange
        // See: https://github.com/mozilla/localForage/issues/128
        // See: https://github.com/mozilla/localForage/issues/272
        typeof IDBKeyRange !== 'undefined';
    } catch (e) {
        return false;
    }
}

// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
// Abstracts constructing a Blob object, so it also works in older
// browsers that don't support the native Blob constructor. (i.e.
// old QtWebKit versions, at least).
function createBlob(parts, properties) {
    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */
    parts = parts || [];
    properties = properties || {};
    try {
        return new Blob(parts, properties);
    } catch (e) {
        if (e.name !== 'TypeError') {
            throw e;
        }
        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;
        var builder = new Builder();
        for (var i = 0; i < parts.length; i += 1) {
            builder.append(parts[i]);
        }
        return builder.getBlob(properties.type);
    }
}

// This is CommonJS because lie is an external dependency, so Rollup
// can just ignore it.
if (typeof Promise === 'undefined') {
    // In the "nopromises" build this will just throw if you don't have
    // a global promise object, but it would throw anyway later.
    _dereq_(3);
}
var Promise$1 = Promise;

function executeCallback(promise, callback) {
    if (callback) {
        promise.then(function (result) {
            callback(null, result);
        }, function (error) {
            callback(error);
        });
    }
}

function executeTwoCallbacks(promise, callback, errorCallback) {
    if (typeof callback === 'function') {
        promise.then(callback);
    }

    if (typeof errorCallback === 'function') {
        promise["catch"](errorCallback);
    }
}

function normalizeKey(key) {
    // Cast the key to a string, as that's all we can set as a key.
    if (typeof key !== 'string') {
        console.warn(key + ' used as a key, but it is not a string.');
        key = String(key);
    }

    return key;
}

function getCallback() {
    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {
        return arguments[arguments.length - 1];
    }
}

// Some code originally from async_storage.js in
// [Gaia](https://github.com/mozilla-b2g/gaia).

var DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';
var supportsBlobs = void 0;
var dbContexts = {};
var toString = Object.prototype.toString;

// Transaction Modes
var READ_ONLY = 'readonly';
var READ_WRITE = 'readwrite';

// Transform a binary string to an array buffer, because otherwise
// weird stuff happens when you try to work with the binary string directly.
// It is known.
// From http://stackoverflow.com/questions/14967647/ (continues on next line)
// encode-decode-image-with-base64-breaks-image (2013-04-21)
function _binStringToArrayBuffer(bin) {
    var length = bin.length;
    var buf = new ArrayBuffer(length);
    var arr = new Uint8Array(buf);
    for (var i = 0; i < length; i++) {
        arr[i] = bin.charCodeAt(i);
    }
    return buf;
}

//
// Blobs are not supported in all versions of IndexedDB, notably
// Chrome <37 and Android <5. In those versions, storing a blob will throw.
//
// Various other blob bugs exist in Chrome v37-42 (inclusive).
// Detecting them is expensive and confusing to users, and Chrome 37-42
// is at very low usage worldwide, so we do a hacky userAgent check instead.
//
// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120
// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916
// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836
//
// Code borrowed from PouchDB. See:
// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js
//
function _checkBlobSupportWithoutCaching(idb) {
    return new Promise$1(function (resolve) {
        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);
        var blob = createBlob(['']);
        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');

        txn.onabort = function (e) {
            // If the transaction aborts now its due to not being able to
            // write to the database, likely due to the disk being full
            e.preventDefault();
            e.stopPropagation();
            resolve(false);
        };

        txn.oncomplete = function () {
            var matchedChrome = navigator.userAgent.match(/Chrome\/(\d+)/);
            var matchedEdge = navigator.userAgent.match(/Edge\//);
            // MS Edge pretends to be Chrome 42:
            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx
            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);
        };
    })["catch"](function () {
        return false; // error, so assume unsupported
    });
}

function _checkBlobSupport(idb) {
    if (typeof supportsBlobs === 'boolean') {
        return Promise$1.resolve(supportsBlobs);
    }
    return _checkBlobSupportWithoutCaching(idb).then(function (value) {
        supportsBlobs = value;
        return supportsBlobs;
    });
}

function _deferReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Create a deferred object representing the current database operation.
    var deferredOperation = {};

    deferredOperation.promise = new Promise$1(function (resolve, reject) {
        deferredOperation.resolve = resolve;
        deferredOperation.reject = reject;
    });

    // Enqueue the deferred operation.
    dbContext.deferredOperations.push(deferredOperation);

    // Chain its promise to the database readiness.
    if (!dbContext.dbReady) {
        dbContext.dbReady = deferredOperation.promise;
    } else {
        dbContext.dbReady = dbContext.dbReady.then(function () {
            return deferredOperation.promise;
        });
    }
}

function _advanceReadiness(dbInfo) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Resolve its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.resolve();
        return deferredOperation.promise;
    }
}

function _rejectReadiness(dbInfo, err) {
    var dbContext = dbContexts[dbInfo.name];

    // Dequeue a deferred operation.
    var deferredOperation = dbContext.deferredOperations.pop();

    // Reject its promise (which is part of the database readiness
    // chain of promises).
    if (deferredOperation) {
        deferredOperation.reject(err);
        return deferredOperation.promise;
    }
}

function _getConnection(dbInfo, upgradeNeeded) {
    return new Promise$1(function (resolve, reject) {
        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();

        if (dbInfo.db) {
            if (upgradeNeeded) {
                _deferReadiness(dbInfo);
                dbInfo.db.close();
            } else {
                return resolve(dbInfo.db);
            }
        }

        var dbArgs = [dbInfo.name];

        if (upgradeNeeded) {
            dbArgs.push(dbInfo.version);
        }

        var openreq = idb.open.apply(idb, dbArgs);

        if (upgradeNeeded) {
            openreq.onupgradeneeded = function (e) {
                var db = openreq.result;
                try {
                    db.createObjectStore(dbInfo.storeName);
                    if (e.oldVersion <= 1) {
                        // Added when support for blob shims was added
                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);
                    }
                } catch (ex) {
                    if (ex.name === 'ConstraintError') {
                        console.warn('The database "' + dbInfo.name + '"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage "' + dbInfo.storeName + '" already exists.');
                    } else {
                        throw ex;
                    }
                }
            };
        }

        openreq.onerror = function (e) {
            e.preventDefault();
            reject(openreq.error);
        };

        openreq.onsuccess = function () {
            var db = openreq.result;
            db.onversionchange = function (e) {
                // Triggered when the database is modified (e.g. adding an objectStore) or
                // deleted (even when initiated by other sessions in different tabs).
                // Closing the connection here prevents those operations from being blocked.
                // If the database is accessed again later by this instance, the connection
                // will be reopened or the database recreated as needed.
                e.target.close();
            };
            resolve(db);
            _advanceReadiness(dbInfo);
        };
    });
}

function _getOriginalConnection(dbInfo) {
    return _getConnection(dbInfo, false);
}

function _getUpgradedConnection(dbInfo) {
    return _getConnection(dbInfo, true);
}

function _isUpgradeNeeded(dbInfo, defaultVersion) {
    if (!dbInfo.db) {
        return true;
    }

    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);
    var isDowngrade = dbInfo.version < dbInfo.db.version;
    var isUpgrade = dbInfo.version > dbInfo.db.version;

    if (isDowngrade) {
        // If the version is not the default one
        // then warn for impossible downgrade.
        if (dbInfo.version !== defaultVersion) {
            console.warn('The database "' + dbInfo.name + '"' + " can't be downgraded from version " + dbInfo.db.version + ' to version ' + dbInfo.version + '.');
        }
        // Align the versions to prevent errors.
        dbInfo.version = dbInfo.db.version;
    }

    if (isUpgrade || isNewStore) {
        // If the store is new then increment the version (if needed).
        // This will trigger an "upgradeneeded" event which is required
        // for creating a store.
        if (isNewStore) {
            var incVersion = dbInfo.db.version + 1;
            if (incVersion > dbInfo.version) {
                dbInfo.version = incVersion;
            }
        }

        return true;
    }

    return false;
}

// encode a blob for indexeddb engines that don't support blobs
function _encodeBlob(blob) {
    return new Promise$1(function (resolve, reject) {
        var reader = new FileReader();
        reader.onerror = reject;
        reader.onloadend = function (e) {
            var base64 = btoa(e.target.result || '');
            resolve({
                __local_forage_encoded_blob: true,
                data: base64,
                type: blob.type
            });
        };
        reader.readAsBinaryString(blob);
    });
}

// decode an encoded blob
function _decodeBlob(encodedBlob) {
    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));
    return createBlob([arrayBuff], { type: encodedBlob.type });
}

// is this one of our fancy encoded blobs?
function _isEncodedBlob(value) {
    return value && value.__local_forage_encoded_blob;
}

// Specialize the default `ready()` function by making it dependent
// on the current database operations. Thus, the driver will be actually
// ready when it's been initialized (default) *and* there are no pending
// operations on the database (initiated by some other instances).
function _fullyReady(callback) {
    var self = this;

    var promise = self._initReady().then(function () {
        var dbContext = dbContexts[self._dbInfo.name];

        if (dbContext && dbContext.dbReady) {
            return dbContext.dbReady;
        }
    });

    executeTwoCallbacks(promise, callback, callback);
    return promise;
}

// Try to establish a new db connection to replace the
// current one which is broken (i.e. experiencing
// InvalidStateError while creating a transaction).
function _tryReconnect(dbInfo) {
    _deferReadiness(dbInfo);

    var dbContext = dbContexts[dbInfo.name];
    var forages = dbContext.forages;

    for (var i = 0; i < forages.length; i++) {
        var forage = forages[i];
        if (forage._dbInfo.db) {
            forage._dbInfo.db.close();
            forage._dbInfo.db = null;
        }
    }
    dbInfo.db = null;

    return _getOriginalConnection(dbInfo).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        // store the latest db reference
        // in case the db was upgraded
        dbInfo.db = dbContext.db = db;
        for (var i = 0; i < forages.length; i++) {
            forages[i]._dbInfo.db = db;
        }
    })["catch"](function (err) {
        _rejectReadiness(dbInfo, err);
        throw err;
    });
}

// FF doesn't like Promises (micro-tasks) and IDDB store operations,
// so we have to do it with callbacks
function createTransaction(dbInfo, mode, callback, retries) {
    if (retries === undefined) {
        retries = 1;
    }

    try {
        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);
        callback(null, tx);
    } catch (err) {
        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {
            return Promise$1.resolve().then(function () {
                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {
                    // increase the db version, to create the new ObjectStore
                    if (dbInfo.db) {
                        dbInfo.version = dbInfo.db.version + 1;
                    }
                    // Reopen the database for upgrading.
                    return _getUpgradedConnection(dbInfo);
                }
            }).then(function () {
                return _tryReconnect(dbInfo).then(function () {
                    createTransaction(dbInfo, mode, callback, retries - 1);
                });
            })["catch"](callback);
        }

        callback(err);
    }
}

function createDbContext() {
    return {
        // Running localForages sharing a database.
        forages: [],
        // Shared database.
        db: null,
        // Database readiness (promise).
        dbReady: null,
        // Deferred operations on the database.
        deferredOperations: []
    };
}

// Open the IndexedDB database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    // Get the current context of the database;
    var dbContext = dbContexts[dbInfo.name];

    // ...or create a new context.
    if (!dbContext) {
        dbContext = createDbContext();
        // Register the new context in the global container.
        dbContexts[dbInfo.name] = dbContext;
    }

    // Register itself as a running localForage in the current context.
    dbContext.forages.push(self);

    // Replace the default `ready()` function with the specialized one.
    if (!self._initReady) {
        self._initReady = self.ready;
        self.ready = _fullyReady;
    }

    // Create an array of initialization states of the related localForages.
    var initPromises = [];

    function ignoreErrors() {
        // Don't handle errors here,
        // just makes sure related localForages aren't pending.
        return Promise$1.resolve();
    }

    for (var j = 0; j < dbContext.forages.length; j++) {
        var forage = dbContext.forages[j];
        if (forage !== self) {
            // Don't wait for itself...
            initPromises.push(forage._initReady()["catch"](ignoreErrors));
        }
    }

    // Take a snapshot of the related localForages.
    var forages = dbContext.forages.slice(0);

    // Initialize the connection process only when
    // all the related localForages aren't pending.
    return Promise$1.all(initPromises).then(function () {
        dbInfo.db = dbContext.db;
        // Get the connection or open a new one without upgrade.
        return _getOriginalConnection(dbInfo);
    }).then(function (db) {
        dbInfo.db = db;
        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {
            // Reopen the database for upgrading.
            return _getUpgradedConnection(dbInfo);
        }
        return db;
    }).then(function (db) {
        dbInfo.db = dbContext.db = db;
        self._dbInfo = dbInfo;
        // Share the final connection amongst related localForages.
        for (var k = 0; k < forages.length; k++) {
            var forage = forages[k];
            if (forage !== self) {
                // Self is already up-to-date.
                forage._dbInfo.db = dbInfo.db;
                forage._dbInfo.version = dbInfo.version;
            }
        }
    });
}

function getItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.get(key);

                    req.onsuccess = function () {
                        var value = req.result;
                        if (value === undefined) {
                            value = null;
                        }
                        if (_isEncodedBlob(value)) {
                            value = _decodeBlob(value);
                        }
                        resolve(value);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items stored in database.
function iterate(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openCursor();
                    var iterationNumber = 1;

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (cursor) {
                            var value = cursor.value;
                            if (_isEncodedBlob(value)) {
                                value = _decodeBlob(value);
                            }
                            var result = iterator(value, cursor.key, iterationNumber++);

                            // when the iterator callback returns any
                            // (non-`undefined`) value, then we stop
                            // the iteration immediately
                            if (result !== void 0) {
                                resolve(result);
                            } else {
                                cursor["continue"]();
                            }
                        } else {
                            resolve();
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);

    return promise;
}

function setItem(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        var dbInfo;
        self.ready().then(function () {
            dbInfo = self._dbInfo;
            if (toString.call(value) === '[object Blob]') {
                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {
                    if (blobSupport) {
                        return value;
                    }
                    return _encodeBlob(value);
                });
            }
            return value;
        }).then(function (value) {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);

                    // The reason we don't _save_ null is because IE 10 does
                    // not support saving the `null` type in IndexedDB. How
                    // ironic, given the bug below!
                    // See: https://github.com/mozilla/localForage/issues/161
                    if (value === null) {
                        value = undefined;
                    }

                    var req = store.put(value, key);

                    transaction.oncomplete = function () {
                        // Cast to undefined so the value passed to
                        // callback/promise is the same as what one would get out
                        // of `getItem()` later. This leads to some weirdness
                        // (setItem('foo', undefined) will return `null`), but
                        // it's not my fault localStorage is our baseline and that
                        // it's weird.
                        if (value === undefined) {
                            value = null;
                        }

                        resolve(value);
                    };
                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function removeItem(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    // We use a Grunt task to make this safe for IE and some
                    // versions of Android (including those used by Cordova).
                    // Normally IE won't like `.delete()` and will insist on
                    // using `['delete']()`, but we have a build step that
                    // fixes this for us now.
                    var req = store["delete"](key);
                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onerror = function () {
                        reject(req.error);
                    };

                    // The request will be also be aborted if we've exceeded our storage
                    // space.
                    transaction.onabort = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function clear(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.clear();

                    transaction.oncomplete = function () {
                        resolve();
                    };

                    transaction.onabort = transaction.onerror = function () {
                        var err = req.error ? req.error : req.transaction.error;
                        reject(err);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function length(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.count();

                    req.onsuccess = function () {
                        resolve(req.result);
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function key(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        if (n < 0) {
            resolve(null);

            return;
        }

        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var advanced = false;
                    var req = store.openKeyCursor();

                    req.onsuccess = function () {
                        var cursor = req.result;
                        if (!cursor) {
                            // this means there weren't enough keys
                            resolve(null);

                            return;
                        }

                        if (n === 0) {
                            // We have the first key, return it if that's what they
                            // wanted.
                            resolve(cursor.key);
                        } else {
                            if (!advanced) {
                                // Otherwise, ask the cursor to skip ahead n
                                // records.
                                advanced = true;
                                cursor.advance(n);
                            } else {
                                // When we get here, we've got the nth key.
                                resolve(cursor.key);
                            }
                        }
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {
                if (err) {
                    return reject(err);
                }

                try {
                    var store = transaction.objectStore(self._dbInfo.storeName);
                    var req = store.openKeyCursor();
                    var keys = [];

                    req.onsuccess = function () {
                        var cursor = req.result;

                        if (!cursor) {
                            resolve(keys);
                            return;
                        }

                        keys.push(cursor.key);
                        cursor["continue"]();
                    };

                    req.onerror = function () {
                        reject(req.error);
                    };
                } catch (e) {
                    reject(e);
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function dropInstance(options, callback) {
    callback = getCallback.apply(this, arguments);

    var currentConfig = this.config();
    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;

        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {
            var dbContext = dbContexts[options.name];
            var forages = dbContext.forages;
            dbContext.db = db;
            for (var i = 0; i < forages.length; i++) {
                forages[i]._dbInfo.db = db;
            }
            return db;
        });

        if (!options.storeName) {
            promise = dbPromise.then(function (db) {
                _deferReadiness(options);

                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;

                db.close();
                for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                }

                var dropDBPromise = new Promise$1(function (resolve, reject) {
                    var req = idb.deleteDatabase(options.name);

                    req.onerror = function () {
                        var db = req.result;
                        if (db) {
                            db.close();
                        }
                        reject(req.error);
                    };

                    req.onblocked = function () {
                        // Closing all open connections in onversionchange handler should prevent this situation, but if
                        // we do get here, it just means the request remains pending - eventually it will succeed or error
                        console.warn('dropInstance blocked for database "' + options.name + '" until all open connections are closed');
                    };

                    req.onsuccess = function () {
                        var db = req.result;
                        if (db) {
                            db.close();
                        }
                        resolve(db);
                    };
                });

                return dropDBPromise.then(function (db) {
                    dbContext.db = db;
                    for (var i = 0; i < forages.length; i++) {
                        var _forage = forages[i];
                        _advanceReadiness(_forage._dbInfo);
                    }
                })["catch"](function (err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                    throw err;
                });
            });
        } else {
            promise = dbPromise.then(function (db) {
                if (!db.objectStoreNames.contains(options.storeName)) {
                    return;
                }

                var newVersion = db.version + 1;

                _deferReadiness(options);

                var dbContext = dbContexts[options.name];
                var forages = dbContext.forages;

                db.close();
                for (var i = 0; i < forages.length; i++) {
                    var forage = forages[i];
                    forage._dbInfo.db = null;
                    forage._dbInfo.version = newVersion;
                }

                var dropObjectPromise = new Promise$1(function (resolve, reject) {
                    var req = idb.open(options.name, newVersion);

                    req.onerror = function (err) {
                        var db = req.result;
                        db.close();
                        reject(err);
                    };

                    req.onupgradeneeded = function () {
                        var db = req.result;
                        db.deleteObjectStore(options.storeName);
                    };

                    req.onsuccess = function () {
                        var db = req.result;
                        db.close();
                        resolve(db);
                    };
                });

                return dropObjectPromise.then(function (db) {
                    dbContext.db = db;
                    for (var j = 0; j < forages.length; j++) {
                        var _forage2 = forages[j];
                        _forage2._dbInfo.db = db;
                        _advanceReadiness(_forage2._dbInfo);
                    }
                })["catch"](function (err) {
                    (_rejectReadiness(options, err) || Promise$1.resolve())["catch"](function () {});
                    throw err;
                });
            });
        }
    }

    executeCallback(promise, callback);
    return promise;
}

var asyncStorage = {
    _driver: 'asyncStorage',
    _initStorage: _initStorage,
    _support: isIndexedDBValid(),
    iterate: iterate,
    getItem: getItem,
    setItem: setItem,
    removeItem: removeItem,
    clear: clear,
    length: length,
    key: key,
    keys: keys,
    dropInstance: dropInstance
};

function isWebSQLValid() {
    return typeof openDatabase === 'function';
}

// Sadly, the best way to save binary data in WebSQL/localStorage is serializing
// it to Base64, so this is how we store it to prevent very strange errors with less
// verbose ways of binary <-> string data storage.
var BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

var BLOB_TYPE_PREFIX = '~~local_forage_type~';
var BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;

var SERIALIZED_MARKER = '__lfsc__:';
var SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;

// OMG the serializations!
var TYPE_ARRAYBUFFER = 'arbf';
var TYPE_BLOB = 'blob';
var TYPE_INT8ARRAY = 'si08';
var TYPE_UINT8ARRAY = 'ui08';
var TYPE_UINT8CLAMPEDARRAY = 'uic8';
var TYPE_INT16ARRAY = 'si16';
var TYPE_INT32ARRAY = 'si32';
var TYPE_UINT16ARRAY = 'ur16';
var TYPE_UINT32ARRAY = 'ui32';
var TYPE_FLOAT32ARRAY = 'fl32';
var TYPE_FLOAT64ARRAY = 'fl64';
var TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;

var toString$1 = Object.prototype.toString;

function stringToBuffer(serializedString) {
    // Fill the string into a ArrayBuffer.
    var bufferLength = serializedString.length * 0.75;
    var len = serializedString.length;
    var i;
    var p = 0;
    var encoded1, encoded2, encoded3, encoded4;

    if (serializedString[serializedString.length - 1] === '=') {
        bufferLength--;
        if (serializedString[serializedString.length - 2] === '=') {
            bufferLength--;
        }
    }

    var buffer = new ArrayBuffer(bufferLength);
    var bytes = new Uint8Array(buffer);

    for (i = 0; i < len; i += 4) {
        encoded1 = BASE_CHARS.indexOf(serializedString[i]);
        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);
        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);
        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);

        /*jslint bitwise: true */
        bytes[p++] = encoded1 << 2 | encoded2 >> 4;
        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;
        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;
    }
    return buffer;
}

// Converts a buffer to a string to store, serialized, in the backend
// storage library.
function bufferToString(buffer) {
    // base64-arraybuffer
    var bytes = new Uint8Array(buffer);
    var base64String = '';
    var i;

    for (i = 0; i < bytes.length; i += 3) {
        /*jslint bitwise: true */
        base64String += BASE_CHARS[bytes[i] >> 2];
        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];
        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];
        base64String += BASE_CHARS[bytes[i + 2] & 63];
    }

    if (bytes.length % 3 === 2) {
        base64String = base64String.substring(0, base64String.length - 1) + '=';
    } else if (bytes.length % 3 === 1) {
        base64String = base64String.substring(0, base64String.length - 2) + '==';
    }

    return base64String;
}

// Serialize a value, afterwards executing a callback (which usually
// instructs the `setItem()` callback/promise to be executed). This is how
// we store binary data with localStorage.
function serialize(value, callback) {
    var valueType = '';
    if (value) {
        valueType = toString$1.call(value);
    }

    // Cannot use `value instanceof ArrayBuffer` or such here, as these
    // checks fail when running the tests using casper.js...
    //
    // TODO: See why those tests fail and use a better solution.
    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {
        // Convert binary arrays to a string and prefix the string with
        // a special marker.
        var buffer;
        var marker = SERIALIZED_MARKER;

        if (value instanceof ArrayBuffer) {
            buffer = value;
            marker += TYPE_ARRAYBUFFER;
        } else {
            buffer = value.buffer;

            if (valueType === '[object Int8Array]') {
                marker += TYPE_INT8ARRAY;
            } else if (valueType === '[object Uint8Array]') {
                marker += TYPE_UINT8ARRAY;
            } else if (valueType === '[object Uint8ClampedArray]') {
                marker += TYPE_UINT8CLAMPEDARRAY;
            } else if (valueType === '[object Int16Array]') {
                marker += TYPE_INT16ARRAY;
            } else if (valueType === '[object Uint16Array]') {
                marker += TYPE_UINT16ARRAY;
            } else if (valueType === '[object Int32Array]') {
                marker += TYPE_INT32ARRAY;
            } else if (valueType === '[object Uint32Array]') {
                marker += TYPE_UINT32ARRAY;
            } else if (valueType === '[object Float32Array]') {
                marker += TYPE_FLOAT32ARRAY;
            } else if (valueType === '[object Float64Array]') {
                marker += TYPE_FLOAT64ARRAY;
            } else {
                callback(new Error('Failed to get type for BinaryArray'));
            }
        }

        callback(marker + bufferToString(buffer));
    } else if (valueType === '[object Blob]') {
        // Conver the blob to a binaryArray and then to a string.
        var fileReader = new FileReader();

        fileReader.onload = function () {
            // Backwards-compatible prefix for the blob type.
            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);

            callback(SERIALIZED_MARKER + TYPE_BLOB + str);
        };

        fileReader.readAsArrayBuffer(value);
    } else {
        try {
            callback(JSON.stringify(value));
        } catch (e) {
            console.error("Couldn't convert value into a JSON string: ", value);

            callback(null, e);
        }
    }
}

// Deserialize data we've inserted into a value column/field. We place
// special markers into our strings to mark them as encoded; this isn't
// as nice as a meta field, but it's the only sane thing we can do whilst
// keeping localStorage support intact.
//
// Oftentimes this will just deserialize JSON content, but if we have a
// special marker (SERIALIZED_MARKER, defined above), we will extract
// some kind of arraybuffer/binary data/typed array out of the string.
function deserialize(value) {
    // If we haven't marked this string as being specially serialized (i.e.
    // something other than serialized JSON), we can just return it and be
    // done with it.
    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {
        return JSON.parse(value);
    }

    // The following code deals with deserializing some kind of Blob or
    // TypedArray. First we separate out the type of data we're dealing
    // with from the data itself.
    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);
    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);

    var blobType;
    // Backwards-compatible blob type serialization strategy.
    // DBs created with older versions of localForage will simply not have the blob type.
    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {
        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);
        blobType = matcher[1];
        serializedString = serializedString.substring(matcher[0].length);
    }
    var buffer = stringToBuffer(serializedString);

    // Return the right type based on the code/type set during
    // serialization.
    switch (type) {
        case TYPE_ARRAYBUFFER:
            return buffer;
        case TYPE_BLOB:
            return createBlob([buffer], { type: blobType });
        case TYPE_INT8ARRAY:
            return new Int8Array(buffer);
        case TYPE_UINT8ARRAY:
            return new Uint8Array(buffer);
        case TYPE_UINT8CLAMPEDARRAY:
            return new Uint8ClampedArray(buffer);
        case TYPE_INT16ARRAY:
            return new Int16Array(buffer);
        case TYPE_UINT16ARRAY:
            return new Uint16Array(buffer);
        case TYPE_INT32ARRAY:
            return new Int32Array(buffer);
        case TYPE_UINT32ARRAY:
            return new Uint32Array(buffer);
        case TYPE_FLOAT32ARRAY:
            return new Float32Array(buffer);
        case TYPE_FLOAT64ARRAY:
            return new Float64Array(buffer);
        default:
            throw new Error('Unkown type: ' + type);
    }
}

var localforageSerializer = {
    serialize: serialize,
    deserialize: deserialize,
    stringToBuffer: stringToBuffer,
    bufferToString: bufferToString
};

/*
 * Includes code from:
 *
 * base64-arraybuffer
 * https://github.com/niklasvh/base64-arraybuffer
 *
 * Copyright (c) 2012 Niklas von Hertzen
 * Licensed under the MIT license.
 */

function createDbTable(t, dbInfo, callback, errorCallback) {
    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);
}

// Open the WebSQL database (automatically creates one if one didn't
// previously exist), using any options set in the config.
function _initStorage$1(options) {
    var self = this;
    var dbInfo = {
        db: null
    };

    if (options) {
        for (var i in options) {
            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];
        }
    }

    var dbInfoPromise = new Promise$1(function (resolve, reject) {
        // Open the database; the openDatabase API will automatically
        // create it for us if it doesn't exist.
        try {
            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);
        } catch (e) {
            return reject(e);
        }

        // Create our key/value table if it doesn't exist.
        dbInfo.db.transaction(function (t) {
            createDbTable(t, dbInfo, function () {
                self._dbInfo = dbInfo;
                resolve();
            }, function (t, error) {
                reject(error);
            });
        }, reject);
    });

    dbInfo.serializer = localforageSerializer;
    return dbInfoPromise;
}

function tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {
    t.executeSql(sqlStatement, args, callback, function (t, error) {
        if (error.code === error.SYNTAX_ERR) {
            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name = ?", [dbInfo.storeName], function (t, results) {
                if (!results.rows.length) {
                    // if the table is missing (was deleted)
                    // re-create it table and retry
                    createDbTable(t, dbInfo, function () {
                        t.executeSql(sqlStatement, args, callback, errorCallback);
                    }, errorCallback);
                } else {
                    errorCallback(t, error);
                }
            }, errorCallback);
        } else {
            errorCallback(t, error);
        }
    }, errorCallback);
}

function getItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).value : null;

                    // Check to see if this is serialized content we need to
                    // unpack.
                    if (result) {
                        result = dbInfo.serializer.deserialize(result);
                    }

                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function iterate$1(iterator, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;

            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {
                    var rows = results.rows;
                    var length = rows.length;

                    for (var i = 0; i < length; i++) {
                        var item = rows.item(i);
                        var result = item.value;

                        // Check to see if this is serialized content
                        // we need to unpack.
                        if (result) {
                            result = dbInfo.serializer.deserialize(result);
                        }

                        result = iterator(result, item.key, i + 1);

                        // void(0) prevents problems with redefinition
                        // of `undefined`.
                        if (result !== void 0) {
                            resolve(result);
                            return;
                        }
                    }

                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function _setItem(key, value, callback, retriesLeft) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            // The localStorage API doesn't return undefined values in an
            // "expected" way, so undefined is always cast to null in all
            // drivers. See: https://github.com/mozilla/localForage/pull/42
            if (value === undefined) {
                value = null;
            }

            // Save the original value to pass to the callback.
            var originalValue = value;

            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    dbInfo.db.transaction(function (t) {
                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {
                            resolve(originalValue);
                        }, function (t, error) {
                            reject(error);
                        });
                    }, function (sqlError) {
                        // The transaction failed; check
                        // to see if it's a quota error.
                        if (sqlError.code === sqlError.QUOTA_ERR) {
                            // We reject the callback outright for now, but
                            // it's worth trying to re-run the transaction.
                            // Even if the user accepts the prompt to use
                            // more storage on Safari, this error will
                            // be called.
                            //
                            // Try to re-run the transaction.
                            if (retriesLeft > 0) {
                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));
                                return;
                            }
                            reject(sqlError);
                        }
                    });
                }
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function setItem$1(key, value, callback) {
    return _setItem.apply(this, [key, value, callback, 1]);
}

function removeItem$1(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Deletes every item in the table.
// TODO: Find out if this resets the AUTO_INCREMENT number.
function clear$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {
                    resolve();
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Does a simple `COUNT(key)` to get the number of items stored in
// localForage.
function length$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                // Ahhh, SQL makes this one soooooo easy.
                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {
                    var result = results.rows.item(0).c;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// Return the key located at key index X; essentially gets the key from a
// `WHERE id = ?`. This is the most efficient way I can think to implement
// this rarely-used (in my experience) part of the API, but it can seem
// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so
// the ID of each key will change every time it's updated. Perhaps a stored
// procedure for the `setItem()` SQL would solve this problem?
// TODO: Don't change ID on `setItem()`.
function key$1(n, callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {
                    var result = results.rows.length ? results.rows.item(0).key : null;
                    resolve(result);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$1(callback) {
    var self = this;

    var promise = new Promise$1(function (resolve, reject) {
        self.ready().then(function () {
            var dbInfo = self._dbInfo;
            dbInfo.db.transaction(function (t) {
                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {
                    var keys = [];

                    for (var i = 0; i < results.rows.length; i++) {
                        keys.push(results.rows.item(i).key);
                    }

                    resolve(keys);
                }, function (t, error) {
                    reject(error);
                });
            });
        })["catch"](reject);
    });

    executeCallback(promise, callback);
    return promise;
}

// https://www.w3.org/TR/webdatabase/#databases
// > There is no way to enumerate or delete the databases available for an origin from this API.
function getAllStoreNames(db) {
    return new Promise$1(function (resolve, reject) {
        db.transaction(function (t) {
            t.executeSql('SELECT name FROM sqlite_master ' + "WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'", [], function (t, results) {
                var storeNames = [];

                for (var i = 0; i < results.rows.length; i++) {
                    storeNames.push(results.rows.item(i).name);
                }

                resolve({
                    db: db,
                    storeNames: storeNames
                });
            }, function (t, error) {
                reject(error);
            });
        }, function (sqlError) {
            reject(sqlError);
        });
    });
}

function dropInstance$1(options, callback) {
    callback = getCallback.apply(this, arguments);

    var currentConfig = this.config();
    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        promise = new Promise$1(function (resolve) {
            var db;
            if (options.name === currentConfig.name) {
                // use the db reference of the current instance
                db = self._dbInfo.db;
            } else {
                db = openDatabase(options.name, '', '', 0);
            }

            if (!options.storeName) {
                // drop all database tables
                resolve(getAllStoreNames(db));
            } else {
                resolve({
                    db: db,
                    storeNames: [options.storeName]
                });
            }
        }).then(function (operationInfo) {
            return new Promise$1(function (resolve, reject) {
                operationInfo.db.transaction(function (t) {
                    function dropTable(storeName) {
                        return new Promise$1(function (resolve, reject) {
                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {
                                resolve();
                            }, function (t, error) {
                                reject(error);
                            });
                        });
                    }

                    var operations = [];
                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {
                        operations.push(dropTable(operationInfo.storeNames[i]));
                    }

                    Promise$1.all(operations).then(function () {
                        resolve();
                    })["catch"](function (e) {
                        reject(e);
                    });
                }, function (sqlError) {
                    reject(sqlError);
                });
            });
        });
    }

    executeCallback(promise, callback);
    return promise;
}

var webSQLStorage = {
    _driver: 'webSQLStorage',
    _initStorage: _initStorage$1,
    _support: isWebSQLValid(),
    iterate: iterate$1,
    getItem: getItem$1,
    setItem: setItem$1,
    removeItem: removeItem$1,
    clear: clear$1,
    length: length$1,
    key: key$1,
    keys: keys$1,
    dropInstance: dropInstance$1
};

function isLocalStorageValid() {
    try {
        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&
        // in IE8 typeof localStorage.setItem === 'object'
        !!localStorage.setItem;
    } catch (e) {
        return false;
    }
}

function _getKeyPrefix(options, defaultConfig) {
    var keyPrefix = options.name + '/';

    if (options.storeName !== defaultConfig.storeName) {
        keyPrefix += options.storeName + '/';
    }
    return keyPrefix;
}

// Check if localStorage throws when saving an item
function checkIfLocalStorageThrows() {
    var localStorageTestKey = '_localforage_support_test';

    try {
        localStorage.setItem(localStorageTestKey, true);
        localStorage.removeItem(localStorageTestKey);

        return false;
    } catch (e) {
        return true;
    }
}

// Check if localStorage is usable and allows to save an item
// This method checks if localStorage is usable in Safari Private Browsing
// mode, or in any other case where the available quota for localStorage
// is 0 and there wasn't any saved items yet.
function _isLocalStorageUsable() {
    return !checkIfLocalStorageThrows() || localStorage.length > 0;
}

// Config the localStorage backend, using options set in the config.
function _initStorage$2(options) {
    var self = this;
    var dbInfo = {};
    if (options) {
        for (var i in options) {
            dbInfo[i] = options[i];
        }
    }

    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);

    if (!_isLocalStorageUsable()) {
        return Promise$1.reject();
    }

    self._dbInfo = dbInfo;
    dbInfo.serializer = localforageSerializer;

    return Promise$1.resolve();
}

// Remove all keys from the datastore, effectively destroying all data in
// the app's key/value store!
function clear$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var keyPrefix = self._dbInfo.keyPrefix;

        for (var i = localStorage.length - 1; i >= 0; i--) {
            var key = localStorage.key(i);

            if (key.indexOf(keyPrefix) === 0) {
                localStorage.removeItem(key);
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Retrieve an item from the store. Unlike the original async_storage
// library in Gaia, we don't modify return values at all. If a key's value
// is `undefined`, we pass that value to the callback function.
function getItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result = localStorage.getItem(dbInfo.keyPrefix + key);

        // If a result was found, parse it from the serialized
        // string into a JS object. If result isn't truthy, the key
        // is likely undefined and we'll pass it straight to the
        // callback.
        if (result) {
            result = dbInfo.serializer.deserialize(result);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

// Iterate over all items in the store.
function iterate$2(iterator, callback) {
    var self = this;

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var keyPrefix = dbInfo.keyPrefix;
        var keyPrefixLength = keyPrefix.length;
        var length = localStorage.length;

        // We use a dedicated iterator instead of the `i` variable below
        // so other keys we fetch in localStorage aren't counted in
        // the `iterationNumber` argument passed to the `iterate()`
        // callback.
        //
        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530
        var iterationNumber = 1;

        for (var i = 0; i < length; i++) {
            var key = localStorage.key(i);
            if (key.indexOf(keyPrefix) !== 0) {
                continue;
            }
            var value = localStorage.getItem(key);

            // If a result was found, parse it from the serialized
            // string into a JS object. If result isn't truthy, the
            // key is likely undefined and we'll pass it straight
            // to the iterator.
            if (value) {
                value = dbInfo.serializer.deserialize(value);
            }

            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);

            if (value !== void 0) {
                return value;
            }
        }
    });

    executeCallback(promise, callback);
    return promise;
}

// Same as localStorage's key() method, except takes a callback.
function key$2(n, callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var result;
        try {
            result = localStorage.key(n);
        } catch (error) {
            result = null;
        }

        // Remove the prefix from the key, if a key is found.
        if (result) {
            result = result.substring(dbInfo.keyPrefix.length);
        }

        return result;
    });

    executeCallback(promise, callback);
    return promise;
}

function keys$2(callback) {
    var self = this;
    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        var length = localStorage.length;
        var keys = [];

        for (var i = 0; i < length; i++) {
            var itemKey = localStorage.key(i);
            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {
                keys.push(itemKey.substring(dbInfo.keyPrefix.length));
            }
        }

        return keys;
    });

    executeCallback(promise, callback);
    return promise;
}

// Supply the number of keys in the datastore to the callback function.
function length$2(callback) {
    var self = this;
    var promise = self.keys().then(function (keys) {
        return keys.length;
    });

    executeCallback(promise, callback);
    return promise;
}

// Remove an item from the store, nice and simple.
function removeItem$2(key, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        var dbInfo = self._dbInfo;
        localStorage.removeItem(dbInfo.keyPrefix + key);
    });

    executeCallback(promise, callback);
    return promise;
}

// Set a key's value and run an optional callback once the value is set.
// Unlike Gaia's implementation, the callback function is passed the value,
// in case you want to operate on that value only after you're sure it
// saved, or something like that.
function setItem$2(key, value, callback) {
    var self = this;

    key = normalizeKey(key);

    var promise = self.ready().then(function () {
        // Convert undefined values to null.
        // https://github.com/mozilla/localForage/pull/42
        if (value === undefined) {
            value = null;
        }

        // Save the original value to pass to the callback.
        var originalValue = value;

        return new Promise$1(function (resolve, reject) {
            var dbInfo = self._dbInfo;
            dbInfo.serializer.serialize(value, function (value, error) {
                if (error) {
                    reject(error);
                } else {
                    try {
                        localStorage.setItem(dbInfo.keyPrefix + key, value);
                        resolve(originalValue);
                    } catch (e) {
                        // localStorage capacity exceeded.
                        // TODO: Make this a specific error/event.
                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {
                            reject(e);
                        }
                        reject(e);
                    }
                }
            });
        });
    });

    executeCallback(promise, callback);
    return promise;
}

function dropInstance$2(options, callback) {
    callback = getCallback.apply(this, arguments);

    options = typeof options !== 'function' && options || {};
    if (!options.name) {
        var currentConfig = this.config();
        options.name = options.name || currentConfig.name;
        options.storeName = options.storeName || currentConfig.storeName;
    }

    var self = this;
    var promise;
    if (!options.name) {
        promise = Promise$1.reject('Invalid arguments');
    } else {
        promise = new Promise$1(function (resolve) {
            if (!options.storeName) {
                resolve(options.name + '/');
            } else {
                resolve(_getKeyPrefix(options, self._defaultConfig));
            }
        }).then(function (keyPrefix) {
            for (var i = localStorage.length - 1; i >= 0; i--) {
                var key = localStorage.key(i);

                if (key.indexOf(keyPrefix) === 0) {
                    localStorage.removeItem(key);
                }
            }
        });
    }

    executeCallback(promise, callback);
    return promise;
}

var localStorageWrapper = {
    _driver: 'localStorageWrapper',
    _initStorage: _initStorage$2,
    _support: isLocalStorageValid(),
    iterate: iterate$2,
    getItem: getItem$2,
    setItem: setItem$2,
    removeItem: removeItem$2,
    clear: clear$2,
    length: length$2,
    key: key$2,
    keys: keys$2,
    dropInstance: dropInstance$2
};

var sameValue = function sameValue(x, y) {
    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);
};

var includes = function includes(array, searchElement) {
    var len = array.length;
    var i = 0;
    while (i < len) {
        if (sameValue(array[i], searchElement)) {
            return true;
        }
        i++;
    }

    return false;
};

var isArray = Array.isArray || function (arg) {
    return Object.prototype.toString.call(arg) === '[object Array]';
};

// Drivers are stored here when `defineDriver()` is called.
// They are shared across all instances of localForage.
var DefinedDrivers = {};

var DriverSupport = {};

var DefaultDrivers = {
    INDEXEDDB: asyncStorage,
    WEBSQL: webSQLStorage,
    LOCALSTORAGE: localStorageWrapper
};

var DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];

var OptionalDriverMethods = ['dropInstance'];

var LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);

var DefaultConfig = {
    description: '',
    driver: DefaultDriverOrder.slice(),
    name: 'localforage',
    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size
    // we can use without a prompt.
    size: 4980736,
    storeName: 'keyvaluepairs',
    version: 1.0
};

function callWhenReady(localForageInstance, libraryMethod) {
    localForageInstance[libraryMethod] = function () {
        var _args = arguments;
        return localForageInstance.ready().then(function () {
            return localForageInstance[libraryMethod].apply(localForageInstance, _args);
        });
    };
}

function extend() {
    for (var i = 1; i < arguments.length; i++) {
        var arg = arguments[i];

        if (arg) {
            for (var _key in arg) {
                if (arg.hasOwnProperty(_key)) {
                    if (isArray(arg[_key])) {
                        arguments[0][_key] = arg[_key].slice();
                    } else {
                        arguments[0][_key] = arg[_key];
                    }
                }
            }
        }
    }

    return arguments[0];
}

var LocalForage = function () {
    function LocalForage(options) {
        _classCallCheck(this, LocalForage);

        for (var driverTypeKey in DefaultDrivers) {
            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {
                var driver = DefaultDrivers[driverTypeKey];
                var driverName = driver._driver;
                this[driverTypeKey] = driverName;

                if (!DefinedDrivers[driverName]) {
                    // we don't need to wait for the promise,
                    // since the default drivers can be defined
                    // in a blocking manner
                    this.defineDriver(driver);
                }
            }
        }

        this._defaultConfig = extend({}, DefaultConfig);
        this._config = extend({}, this._defaultConfig, options);
        this._driverSet = null;
        this._initDriver = null;
        this._ready = false;
        this._dbInfo = null;

        this._wrapLibraryMethodsWithReady();
        this.setDriver(this._config.driver)["catch"](function () {});
    }

    // Set any config values for localForage; can be called anytime before
    // the first API call (e.g. `getItem`, `setItem`).
    // We loop through options so we don't overwrite existing config
    // values.


    LocalForage.prototype.config = function config(options) {
        // If the options argument is an object, we use it to set values.
        // Otherwise, we return either a specified config value or all
        // config values.
        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {
            // If localforage is ready and fully initialized, we can't set
            // any new configuration values. Instead, we return an error.
            if (this._ready) {
                return new Error("Can't call config() after localforage " + 'has been used.');
            }

            for (var i in options) {
                if (i === 'storeName') {
                    options[i] = options[i].replace(/\W/g, '_');
                }

                if (i === 'version' && typeof options[i] !== 'number') {
                    return new Error('Database version must be a number.');
                }

                this._config[i] = options[i];
            }

            // after all config options are set and
            // the driver option is used, try setting it
            if ('driver' in options && options.driver) {
                return this.setDriver(this._config.driver);
            }

            return true;
        } else if (typeof options === 'string') {
            return this._config[options];
        } else {
            return this._config;
        }
    };

    // Used to define a custom driver, shared across all instances of
    // localForage.


    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {
        var promise = new Promise$1(function (resolve, reject) {
            try {
                var driverName = driverObject._driver;
                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');

                // A driver name should be defined and not overlap with the
                // library-defined, default drivers.
                if (!driverObject._driver) {
                    reject(complianceError);
                    return;
                }

                var driverMethods = LibraryMethods.concat('_initStorage');
                for (var i = 0, len = driverMethods.length; i < len; i++) {
                    var driverMethodName = driverMethods[i];

                    // when the property is there,
                    // it should be a method even when optional
                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);
                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {
                        reject(complianceError);
                        return;
                    }
                }

                var configureMissingMethods = function configureMissingMethods() {
                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {
                        return function () {
                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');
                            var promise = Promise$1.reject(error);
                            executeCallback(promise, arguments[arguments.length - 1]);
                            return promise;
                        };
                    };

                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {
                        var optionalDriverMethod = OptionalDriverMethods[_i];
                        if (!driverObject[optionalDriverMethod]) {
                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);
                        }
                    }
                };

                configureMissingMethods();

                var setDriverSupport = function setDriverSupport(support) {
                    if (DefinedDrivers[driverName]) {
                        console.info('Redefining LocalForage driver: ' + driverName);
                    }
                    DefinedDrivers[driverName] = driverObject;
                    DriverSupport[driverName] = support;
                    // don't use a then, so that we can define
                    // drivers that have simple _support methods
                    // in a blocking manner
                    resolve();
                };

                if ('_support' in driverObject) {
                    if (driverObject._support && typeof driverObject._support === 'function') {
                        driverObject._support().then(setDriverSupport, reject);
                    } else {
                        setDriverSupport(!!driverObject._support);
                    }
                } else {
                    setDriverSupport(true);
                }
            } catch (e) {
                reject(e);
            }
        });

        executeTwoCallbacks(promise, callback, errorCallback);
        return promise;
    };

    LocalForage.prototype.driver = function driver() {
        return this._driver || null;
    };

    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {
        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));

        executeTwoCallbacks(getDriverPromise, callback, errorCallback);
        return getDriverPromise;
    };

    LocalForage.prototype.getSerializer = function getSerializer(callback) {
        var serializerPromise = Promise$1.resolve(localforageSerializer);
        executeTwoCallbacks(serializerPromise, callback);
        return serializerPromise;
    };

    LocalForage.prototype.ready = function ready(callback) {
        var self = this;

        var promise = self._driverSet.then(function () {
            if (self._ready === null) {
                self._ready = self._initDriver();
            }

            return self._ready;
        });

        executeTwoCallbacks(promise, callback, callback);
        return promise;
    };

    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {
        var self = this;

        if (!isArray(drivers)) {
            drivers = [drivers];
        }

        var supportedDrivers = this._getSupportedDrivers(drivers);

        function setDriverToConfig() {
            self._config.driver = self.driver();
        }

        function extendSelfWithDriver(driver) {
            self._extend(driver);
            setDriverToConfig();

            self._ready = self._initStorage(self._config);
            return self._ready;
        }

        function initDriver(supportedDrivers) {
            return function () {
                var currentDriverIndex = 0;

                function driverPromiseLoop() {
                    while (currentDriverIndex < supportedDrivers.length) {
                        var driverName = supportedDrivers[currentDriverIndex];
                        currentDriverIndex++;

                        self._dbInfo = null;
                        self._ready = null;

                        return self.getDriver(driverName).then(extendSelfWithDriver)["catch"](driverPromiseLoop);
                    }

                    setDriverToConfig();
                    var error = new Error('No available storage method found.');
                    self._driverSet = Promise$1.reject(error);
                    return self._driverSet;
                }

                return driverPromiseLoop();
            };
        }

        // There might be a driver initialization in progress
        // so wait for it to finish in order to avoid a possible
        // race condition to set _dbInfo
        var oldDriverSetDone = this._driverSet !== null ? this._driverSet["catch"](function () {
            return Promise$1.resolve();
        }) : Promise$1.resolve();

        this._driverSet = oldDriverSetDone.then(function () {
            var driverName = supportedDrivers[0];
            self._dbInfo = null;
            self._ready = null;

            return self.getDriver(driverName).then(function (driver) {
                self._driver = driver._driver;
                setDriverToConfig();
                self._wrapLibraryMethodsWithReady();
                self._initDriver = initDriver(supportedDrivers);
            });
        })["catch"](function () {
            setDriverToConfig();
            var error = new Error('No available storage method found.');
            self._driverSet = Promise$1.reject(error);
            return self._driverSet;
        });

        executeTwoCallbacks(this._driverSet, callback, errorCallback);
        return this._driverSet;
    };

    LocalForage.prototype.supports = function supports(driverName) {
        return !!DriverSupport[driverName];
    };

    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {
        extend(this, libraryMethodsAndProperties);
    };

    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {
        var supportedDrivers = [];
        for (var i = 0, len = drivers.length; i < len; i++) {
            var driverName = drivers[i];
            if (this.supports(driverName)) {
                supportedDrivers.push(driverName);
            }
        }
        return supportedDrivers;
    };

    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {
        // Add a stub for each driver API method that delays the call to the
        // corresponding driver method until localForage is ready. These stubs
        // will be replaced by the driver methods as soon as the driver is
        // loaded, so there is no performance impact.
        for (var i = 0, len = LibraryMethods.length; i < len; i++) {
            callWhenReady(this, LibraryMethods[i]);
        }
    };

    LocalForage.prototype.createInstance = function createInstance(options) {
        return new LocalForage(options);
    };

    return LocalForage;
}();

// The actual localForage object that we expose as a module or via a
// global. It's extended by pulling in one of our other libraries.


var localforage_js = new LocalForage();

module.exports = localforage_js;

},{"3":3}]},{},[4])(4)
});


/***/ }),

/***/ "./node_modules/lru-cache/index.js":
/*!*****************************************!*\
  !*** ./node_modules/lru-cache/index.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";


// A linked list to keep track of recently-used-ness
const Yallist = __webpack_require__(/*! yallist */ "./node_modules/yallist/yallist.js")

const MAX = Symbol('max')
const LENGTH = Symbol('length')
const LENGTH_CALCULATOR = Symbol('lengthCalculator')
const ALLOW_STALE = Symbol('allowStale')
const MAX_AGE = Symbol('maxAge')
const DISPOSE = Symbol('dispose')
const NO_DISPOSE_ON_SET = Symbol('noDisposeOnSet')
const LRU_LIST = Symbol('lruList')
const CACHE = Symbol('cache')
const UPDATE_AGE_ON_GET = Symbol('updateAgeOnGet')

const naiveLength = () => 1

// lruList is a yallist where the head is the youngest
// item, and the tail is the oldest.  the list contains the Hit
// objects as the entries.
// Each Hit object has a reference to its Yallist.Node.  This
// never changes.
//
// cache is a Map (or PseudoMap) that matches the keys to
// the Yallist.Node object.
class LRUCache {
  constructor (options) {
    if (typeof options === 'number')
      options = { max: options }

    if (!options)
      options = {}

    if (options.max && (typeof options.max !== 'number' || options.max < 0))
      throw new TypeError('max must be a non-negative number')
    // Kind of weird to have a default max of Infinity, but oh well.
    const max = this[MAX] = options.max || Infinity

    const lc = options.length || naiveLength
    this[LENGTH_CALCULATOR] = (typeof lc !== 'function') ? naiveLength : lc
    this[ALLOW_STALE] = options.stale || false
    if (options.maxAge && typeof options.maxAge !== 'number')
      throw new TypeError('maxAge must be a number')
    this[MAX_AGE] = options.maxAge || 0
    this[DISPOSE] = options.dispose
    this[NO_DISPOSE_ON_SET] = options.noDisposeOnSet || false
    this[UPDATE_AGE_ON_GET] = options.updateAgeOnGet || false
    this.reset()
  }

  // resize the cache when the max changes.
  set max (mL) {
    if (typeof mL !== 'number' || mL < 0)
      throw new TypeError('max must be a non-negative number')

    this[MAX] = mL || Infinity
    trim(this)
  }
  get max () {
    return this[MAX]
  }

  set allowStale (allowStale) {
    this[ALLOW_STALE] = !!allowStale
  }
  get allowStale () {
    return this[ALLOW_STALE]
  }

  set maxAge (mA) {
    if (typeof mA !== 'number')
      throw new TypeError('maxAge must be a non-negative number')

    this[MAX_AGE] = mA
    trim(this)
  }
  get maxAge () {
    return this[MAX_AGE]
  }

  // resize the cache when the lengthCalculator changes.
  set lengthCalculator (lC) {
    if (typeof lC !== 'function')
      lC = naiveLength

    if (lC !== this[LENGTH_CALCULATOR]) {
      this[LENGTH_CALCULATOR] = lC
      this[LENGTH] = 0
      this[LRU_LIST].forEach(hit => {
        hit.length = this[LENGTH_CALCULATOR](hit.value, hit.key)
        this[LENGTH] += hit.length
      })
    }
    trim(this)
  }
  get lengthCalculator () { return this[LENGTH_CALCULATOR] }

  get length () { return this[LENGTH] }
  get itemCount () { return this[LRU_LIST].length }

  rforEach (fn, thisp) {
    thisp = thisp || this
    for (let walker = this[LRU_LIST].tail; walker !== null;) {
      const prev = walker.prev
      forEachStep(this, fn, walker, thisp)
      walker = prev
    }
  }

  forEach (fn, thisp) {
    thisp = thisp || this
    for (let walker = this[LRU_LIST].head; walker !== null;) {
      const next = walker.next
      forEachStep(this, fn, walker, thisp)
      walker = next
    }
  }

  keys () {
    return this[LRU_LIST].toArray().map(k => k.key)
  }

  values () {
    return this[LRU_LIST].toArray().map(k => k.value)
  }

  reset () {
    if (this[DISPOSE] &&
        this[LRU_LIST] &&
        this[LRU_LIST].length) {
      this[LRU_LIST].forEach(hit => this[DISPOSE](hit.key, hit.value))
    }

    this[CACHE] = new Map() // hash of items by key
    this[LRU_LIST] = new Yallist() // list of items in order of use recency
    this[LENGTH] = 0 // length of items in the list
  }

  dump () {
    return this[LRU_LIST].map(hit =>
      isStale(this, hit) ? false : {
        k: hit.key,
        v: hit.value,
        e: hit.now + (hit.maxAge || 0)
      }).toArray().filter(h => h)
  }

  dumpLru () {
    return this[LRU_LIST]
  }

  set (key, value, maxAge) {
    maxAge = maxAge || this[MAX_AGE]

    if (maxAge && typeof maxAge !== 'number')
      throw new TypeError('maxAge must be a number')

    const now = maxAge ? Date.now() : 0
    const len = this[LENGTH_CALCULATOR](value, key)

    if (this[CACHE].has(key)) {
      if (len > this[MAX]) {
        del(this, this[CACHE].get(key))
        return false
      }

      const node = this[CACHE].get(key)
      const item = node.value

      // dispose of the old one before overwriting
      // split out into 2 ifs for better coverage tracking
      if (this[DISPOSE]) {
        if (!this[NO_DISPOSE_ON_SET])
          this[DISPOSE](key, item.value)
      }

      item.now = now
      item.maxAge = maxAge
      item.value = value
      this[LENGTH] += len - item.length
      item.length = len
      this.get(key)
      trim(this)
      return true
    }

    const hit = new Entry(key, value, len, now, maxAge)

    // oversized objects fall out of cache automatically.
    if (hit.length > this[MAX]) {
      if (this[DISPOSE])
        this[DISPOSE](key, value)

      return false
    }

    this[LENGTH] += hit.length
    this[LRU_LIST].unshift(hit)
    this[CACHE].set(key, this[LRU_LIST].head)
    trim(this)
    return true
  }

  has (key) {
    if (!this[CACHE].has(key)) return false
    const hit = this[CACHE].get(key).value
    return !isStale(this, hit)
  }

  get (key) {
    return get(this, key, true)
  }

  peek (key) {
    return get(this, key, false)
  }

  pop () {
    const node = this[LRU_LIST].tail
    if (!node)
      return null

    del(this, node)
    return node.value
  }

  del (key) {
    del(this, this[CACHE].get(key))
  }

  load (arr) {
    // reset the cache
    this.reset()

    const now = Date.now()
    // A previous serialized cache has the most recent items first
    for (let l = arr.length - 1; l >= 0; l--) {
      const hit = arr[l]
      const expiresAt = hit.e || 0
      if (expiresAt === 0)
        // the item was created without expiration in a non aged cache
        this.set(hit.k, hit.v)
      else {
        const maxAge = expiresAt - now
        // dont add already expired items
        if (maxAge > 0) {
          this.set(hit.k, hit.v, maxAge)
        }
      }
    }
  }

  prune () {
    this[CACHE].forEach((value, key) => get(this, key, false))
  }
}

const get = (self, key, doUse) => {
  const node = self[CACHE].get(key)
  if (node) {
    const hit = node.value
    if (isStale(self, hit)) {
      del(self, node)
      if (!self[ALLOW_STALE])
        return undefined
    } else {
      if (doUse) {
        if (self[UPDATE_AGE_ON_GET])
          node.value.now = Date.now()
        self[LRU_LIST].unshiftNode(node)
      }
    }
    return hit.value
  }
}

const isStale = (self, hit) => {
  if (!hit || (!hit.maxAge && !self[MAX_AGE]))
    return false

  const diff = Date.now() - hit.now
  return hit.maxAge ? diff > hit.maxAge
    : self[MAX_AGE] && (diff > self[MAX_AGE])
}

const trim = self => {
  if (self[LENGTH] > self[MAX]) {
    for (let walker = self[LRU_LIST].tail;
      self[LENGTH] > self[MAX] && walker !== null;) {
      // We know that we're about to delete this one, and also
      // what the next least recently used key will be, so just
      // go ahead and set it now.
      const prev = walker.prev
      del(self, walker)
      walker = prev
    }
  }
}

const del = (self, node) => {
  if (node) {
    const hit = node.value
    if (self[DISPOSE])
      self[DISPOSE](hit.key, hit.value)

    self[LENGTH] -= hit.length
    self[CACHE].delete(hit.key)
    self[LRU_LIST].removeNode(node)
  }
}

class Entry {
  constructor (key, value, length, now, maxAge) {
    this.key = key
    this.value = value
    this.length = length
    this.now = now
    this.maxAge = maxAge || 0
  }
}

const forEachStep = (self, fn, node, thisp) => {
  let hit = node.value
  if (isStale(self, hit)) {
    del(self, node)
    if (!self[ALLOW_STALE])
      hit = undefined
  }
  if (hit)
    fn.call(thisp, hit.value, hit.key, self)
}

module.exports = LRUCache


/***/ }),

/***/ "./node_modules/magic-sdk/dist/module/iframe-controller.js":
/*!*****************************************************************!*\
  !*** ./node_modules/magic-sdk/dist/module/iframe-controller.js ***!
  \*****************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "IframeController": function() { return /* binding */ IframeController; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/provider */ "./node_modules/@magic-sdk/provider/dist/module/index.js");
/* eslint-disable no-underscore-dangle */
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (undefined && undefined.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};

/**
 * Magic `<iframe>` overlay styles. These base styles enable `<iframe>` UI
 * to render above all other DOM content.
 */
var overlayStyles = {
    display: 'none',
    position: 'fixed',
    top: '0',
    right: '0',
    width: '100%',
    height: '100%',
    borderRadius: '0',
    border: 'none',
    zIndex: '2147483647',
};
/**
 * Apply iframe styles to the given element.
 * @param elem - An element to apply styles using CSSOM.
 */
function applyOverlayStyles(elem) {
    var e_1, _a;
    try {
        for (var _b = __values(Object.entries(overlayStyles)), _c = _b.next(); !_c.done; _c = _b.next()) {
            var _d = __read(_c.value, 2), cssProperty = _d[0], value = _d[1];
            /* eslint-disable-next-line no-param-reassign */
            elem.style[cssProperty] = value;
        }
    }
    catch (e_1_1) { e_1 = { error: e_1_1 }; }
    finally {
        try {
            if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
        }
        finally { if (e_1) throw e_1.error; }
    }
}
/**
 * Checks if the given query params are associated with an active `<iframe>`
 * instance.
 *
 * @param encodedQueryParams - The unique, encoded query parameters to check for
 * duplicates against.
 */
function checkForSameSrcInstances(encodedQueryParams) {
    var iframes = [].slice.call(document.querySelectorAll('.magic-iframe'));
    return Boolean(iframes.find(function (iframe) { return iframe.src.includes(encodedQueryParams); }));
}
/**
 * View controller for the Magic `<iframe>` overlay.
 */
var IframeController = /** @class */ (function (_super) {
    __extends(IframeController, _super);
    function IframeController() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    IframeController.prototype.init = function () {
        this.iframe = this.createIframe();
    };
    IframeController.prototype.createIframe = function () {
        var _this = this;
        return new Promise(function (resolve) {
            var onload = function () {
                if (!checkForSameSrcInstances(encodeURIComponent(_this.encodedQueryParams))) {
                    var iframe = document.createElement('iframe');
                    iframe.classList.add('magic-iframe');
                    iframe.dataset.magicIframeLabel = (0,_magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.createURL)(_this.endpoint).host;
                    iframe.src = (0,_magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.createURL)("/send?params=" + encodeURIComponent(_this.encodedQueryParams), _this.endpoint).href;
                    applyOverlayStyles(iframe);
                    document.body.appendChild(iframe);
                    resolve(iframe);
                }
                else {
                    (0,_magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.createDuplicateIframeWarning)().log();
                }
            };
            // Check DOM state and load...
            if (['loaded', 'interactive', 'complete'].includes(document.readyState)) {
                onload();
            }
            else {
                // ...or check load events to load
                window.addEventListener('load', onload, false);
            }
        });
    };
    IframeController.prototype.showOverlay = function () {
        return __awaiter(this, void 0, void 0, function () {
            var overlayResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.iframe];
                    case 1:
                        overlayResolved = _a.sent();
                        overlayResolved.style.display = 'block';
                        return [2 /*return*/];
                }
            });
        });
    };
    IframeController.prototype.hideOverlay = function () {
        return __awaiter(this, void 0, void 0, function () {
            var overlayResolved;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.iframe];
                    case 1:
                        overlayResolved = _a.sent();
                        overlayResolved.style.display = 'none';
                        return [2 /*return*/];
                }
            });
        });
    };
    IframeController.prototype.postMessage = function (data) {
        return __awaiter(this, void 0, void 0, function () {
            var iframe;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.iframe];
                    case 1:
                        iframe = _a.sent();
                        if (iframe && iframe.contentWindow) {
                            iframe.contentWindow.postMessage(data, this.endpoint);
                        }
                        else {
                            throw (0,_magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.createModalNotReadyError)();
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    return IframeController;
}(_magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.ViewController));

//# sourceMappingURL=iframe-controller.js.map

/***/ }),

/***/ "./node_modules/magic-sdk/dist/module/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/magic-sdk/dist/module/index.js ***!
  \*****************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "Extension": function() { return /* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.Extension; },
/* harmony export */   "SDKError": function() { return /* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicSDKError; },
/* harmony export */   "ExtensionError": function() { return /* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicExtensionError; },
/* harmony export */   "ExtensionWarning": function() { return /* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicExtensionWarning; },
/* harmony export */   "RPCError": function() { return /* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicRPCError; },
/* harmony export */   "SDKWarning": function() { return /* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.MagicSDKWarning; },
/* harmony export */   "isPromiEvent": function() { return /* reexport safe */ _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.isPromiEvent; },
/* harmony export */   "Magic": function() { return /* binding */ Magic; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/provider */ "./node_modules/@magic-sdk/provider/dist/module/index.js");
/* harmony import */ var localforage__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! localforage */ "./node_modules/localforage/dist/localforage.js");
/* harmony import */ var localforage__WEBPACK_IMPORTED_MODULE_1___default = /*#__PURE__*/__webpack_require__.n(localforage__WEBPACK_IMPORTED_MODULE_1__);
/* harmony import */ var localforage_driver_memory__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! localforage-driver-memory */ "./node_modules/localforage-driver-memory/_bundle/umd.js");
/* harmony import */ var localforage_driver_memory__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(localforage_driver_memory__WEBPACK_IMPORTED_MODULE_2__);
/* harmony import */ var _iframe_controller__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./iframe-controller */ "./node_modules/magic-sdk/dist/module/iframe-controller.js");
/* harmony import */ var _web_transport__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./web-transport */ "./node_modules/magic-sdk/dist/module/web-transport.js");
/* harmony import */ var _magic_sdk_types__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @magic-sdk/types */ "./node_modules/@magic-sdk/types/dist/module/index.js");
/* harmony reexport (unknown) */ var __WEBPACK_REEXPORT_OBJECT__ = {};
/* harmony reexport (unknown) */ for(var __WEBPACK_IMPORT_KEY__ in _magic_sdk_types__WEBPACK_IMPORTED_MODULE_5__) if(["default","Extension","SDKError","ExtensionError","ExtensionWarning","RPCError","SDKWarning","isPromiEvent","Magic"].indexOf(__WEBPACK_IMPORT_KEY__) < 0) __WEBPACK_REEXPORT_OBJECT__[__WEBPACK_IMPORT_KEY__] = function(key) { return _magic_sdk_types__WEBPACK_IMPORTED_MODULE_5__[key]; }.bind(0, __WEBPACK_IMPORT_KEY__)
/* harmony reexport (unknown) */ __webpack_require__.d(__webpack_exports__, __WEBPACK_REEXPORT_OBJECT__);
/* eslint-disable no-underscore-dangle */
var __awaiter = (undefined && undefined.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (undefined && undefined.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};







var Magic = (0,_magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.createSDK)(_magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.SDKBase, {
    target: 'web',
    sdkName: 'magic-sdk',
    version: '2.7.0',
    defaultEndpoint: 'https://auth.magic.link/',
    ViewController: _iframe_controller__WEBPACK_IMPORTED_MODULE_3__.IframeController,
    PayloadTransport: _web_transport__WEBPACK_IMPORTED_MODULE_4__.WebTransport,
    configureStorage: /* istanbul ignore next */ function () { return __awaiter(void 0, void 0, void 0, function () {
        var lf;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    lf = localforage__WEBPACK_IMPORTED_MODULE_1___default().createInstance({
                        name: 'MagicAuthLocalStorageDB',
                        storeName: 'MagicAuthLocalStorage',
                    });
                    return [4 /*yield*/, lf.defineDriver(localforage_driver_memory__WEBPACK_IMPORTED_MODULE_2__)];
                case 1:
                    _a.sent();
                    return [4 /*yield*/, lf.setDriver([(localforage__WEBPACK_IMPORTED_MODULE_1___default().INDEXEDDB), (localforage__WEBPACK_IMPORTED_MODULE_1___default().LOCALSTORAGE), localforage_driver_memory__WEBPACK_IMPORTED_MODULE_2__._driver])];
                case 2:
                    _a.sent();
                    return [2 /*return*/, lf];
            }
        });
    }); },
});
//# sourceMappingURL=index.js.map

/***/ }),

/***/ "./node_modules/magic-sdk/dist/module/web-transport.js":
/*!*************************************************************!*\
  !*** ./node_modules/magic-sdk/dist/module/web-transport.js ***!
  \*************************************************************/
/***/ (function(__unused_webpack_module, __webpack_exports__, __webpack_require__) {

"use strict";
__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   "WebTransport": function() { return /* binding */ WebTransport; }
/* harmony export */ });
/* harmony import */ var _magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @magic-sdk/provider */ "./node_modules/@magic-sdk/provider/dist/module/index.js");
var __extends = (undefined && undefined.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __values = (undefined && undefined.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};

var WebTransport = /** @class */ (function (_super) {
    __extends(WebTransport, _super);
    function WebTransport() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * Initialize the underlying `Window.onmessage` event listener.
     */
    WebTransport.prototype.init = function () {
        var _this = this;
        window.addEventListener('message', function (event) {
            var e_1, _a;
            var _b;
            if (event.origin === _this.endpoint) {
                if (event.data && event.data.msgType && _this.messageHandlers.size) {
                    // If the response object is undefined, we ensure it's at least an
                    // empty object before passing to the event listener.
                    /* eslint-disable-next-line no-param-reassign */
                    event.data.response = (_b = event.data.response) !== null && _b !== void 0 ? _b : {};
                    try {
                        for (var _c = __values(_this.messageHandlers.values()), _d = _c.next(); !_d.done; _d = _c.next()) {
                            var handler = _d.value;
                            handler(event);
                        }
                    }
                    catch (e_1_1) { e_1 = { error: e_1_1 }; }
                    finally {
                        try {
                            if (_d && !_d.done && (_a = _c.return)) _a.call(_c);
                        }
                        finally { if (e_1) throw e_1.error; }
                    }
                }
            }
        });
    };
    return WebTransport;
}(_magic_sdk_provider__WEBPACK_IMPORTED_MODULE_0__.PayloadTransport));

//# sourceMappingURL=web-transport.js.map

/***/ }),

/***/ "./node_modules/yallist/iterator.js":
/*!******************************************!*\
  !*** ./node_modules/yallist/iterator.js ***!
  \******************************************/
/***/ (function(module) {

"use strict";

module.exports = function (Yallist) {
  Yallist.prototype[Symbol.iterator] = function* () {
    for (let walker = this.head; walker; walker = walker.next) {
      yield walker.value
    }
  }
}


/***/ }),

/***/ "./node_modules/yallist/yallist.js":
/*!*****************************************!*\
  !*** ./node_modules/yallist/yallist.js ***!
  \*****************************************/
/***/ (function(module, __unused_webpack_exports, __webpack_require__) {

"use strict";

module.exports = Yallist

Yallist.Node = Node
Yallist.create = Yallist

function Yallist (list) {
  var self = this
  if (!(self instanceof Yallist)) {
    self = new Yallist()
  }

  self.tail = null
  self.head = null
  self.length = 0

  if (list && typeof list.forEach === 'function') {
    list.forEach(function (item) {
      self.push(item)
    })
  } else if (arguments.length > 0) {
    for (var i = 0, l = arguments.length; i < l; i++) {
      self.push(arguments[i])
    }
  }

  return self
}

Yallist.prototype.removeNode = function (node) {
  if (node.list !== this) {
    throw new Error('removing node which does not belong to this list')
  }

  var next = node.next
  var prev = node.prev

  if (next) {
    next.prev = prev
  }

  if (prev) {
    prev.next = next
  }

  if (node === this.head) {
    this.head = next
  }
  if (node === this.tail) {
    this.tail = prev
  }

  node.list.length--
  node.next = null
  node.prev = null
  node.list = null

  return next
}

Yallist.prototype.unshiftNode = function (node) {
  if (node === this.head) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var head = this.head
  node.list = this
  node.next = head
  if (head) {
    head.prev = node
  }

  this.head = node
  if (!this.tail) {
    this.tail = node
  }
  this.length++
}

Yallist.prototype.pushNode = function (node) {
  if (node === this.tail) {
    return
  }

  if (node.list) {
    node.list.removeNode(node)
  }

  var tail = this.tail
  node.list = this
  node.prev = tail
  if (tail) {
    tail.next = node
  }

  this.tail = node
  if (!this.head) {
    this.head = node
  }
  this.length++
}

Yallist.prototype.push = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    push(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.unshift = function () {
  for (var i = 0, l = arguments.length; i < l; i++) {
    unshift(this, arguments[i])
  }
  return this.length
}

Yallist.prototype.pop = function () {
  if (!this.tail) {
    return undefined
  }

  var res = this.tail.value
  this.tail = this.tail.prev
  if (this.tail) {
    this.tail.next = null
  } else {
    this.head = null
  }
  this.length--
  return res
}

Yallist.prototype.shift = function () {
  if (!this.head) {
    return undefined
  }

  var res = this.head.value
  this.head = this.head.next
  if (this.head) {
    this.head.prev = null
  } else {
    this.tail = null
  }
  this.length--
  return res
}

Yallist.prototype.forEach = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.head, i = 0; walker !== null; i++) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.next
  }
}

Yallist.prototype.forEachReverse = function (fn, thisp) {
  thisp = thisp || this
  for (var walker = this.tail, i = this.length - 1; walker !== null; i--) {
    fn.call(thisp, walker.value, i, this)
    walker = walker.prev
  }
}

Yallist.prototype.get = function (n) {
  for (var i = 0, walker = this.head; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.next
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.getReverse = function (n) {
  for (var i = 0, walker = this.tail; walker !== null && i < n; i++) {
    // abort out of the list early if we hit a cycle
    walker = walker.prev
  }
  if (i === n && walker !== null) {
    return walker.value
  }
}

Yallist.prototype.map = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.head; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.next
  }
  return res
}

Yallist.prototype.mapReverse = function (fn, thisp) {
  thisp = thisp || this
  var res = new Yallist()
  for (var walker = this.tail; walker !== null;) {
    res.push(fn.call(thisp, walker.value, this))
    walker = walker.prev
  }
  return res
}

Yallist.prototype.reduce = function (fn, initial) {
  var acc
  var walker = this.head
  if (arguments.length > 1) {
    acc = initial
  } else if (this.head) {
    walker = this.head.next
    acc = this.head.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = 0; walker !== null; i++) {
    acc = fn(acc, walker.value, i)
    walker = walker.next
  }

  return acc
}

Yallist.prototype.reduceReverse = function (fn, initial) {
  var acc
  var walker = this.tail
  if (arguments.length > 1) {
    acc = initial
  } else if (this.tail) {
    walker = this.tail.prev
    acc = this.tail.value
  } else {
    throw new TypeError('Reduce of empty list with no initial value')
  }

  for (var i = this.length - 1; walker !== null; i--) {
    acc = fn(acc, walker.value, i)
    walker = walker.prev
  }

  return acc
}

Yallist.prototype.toArray = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.head; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.next
  }
  return arr
}

Yallist.prototype.toArrayReverse = function () {
  var arr = new Array(this.length)
  for (var i = 0, walker = this.tail; walker !== null; i++) {
    arr[i] = walker.value
    walker = walker.prev
  }
  return arr
}

Yallist.prototype.slice = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = 0, walker = this.head; walker !== null && i < from; i++) {
    walker = walker.next
  }
  for (; walker !== null && i < to; i++, walker = walker.next) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.sliceReverse = function (from, to) {
  to = to || this.length
  if (to < 0) {
    to += this.length
  }
  from = from || 0
  if (from < 0) {
    from += this.length
  }
  var ret = new Yallist()
  if (to < from || to < 0) {
    return ret
  }
  if (from < 0) {
    from = 0
  }
  if (to > this.length) {
    to = this.length
  }
  for (var i = this.length, walker = this.tail; walker !== null && i > to; i--) {
    walker = walker.prev
  }
  for (; walker !== null && i > from; i--, walker = walker.prev) {
    ret.push(walker.value)
  }
  return ret
}

Yallist.prototype.splice = function (start, deleteCount, ...nodes) {
  if (start > this.length) {
    start = this.length - 1
  }
  if (start < 0) {
    start = this.length + start;
  }

  for (var i = 0, walker = this.head; walker !== null && i < start; i++) {
    walker = walker.next
  }

  var ret = []
  for (var i = 0; walker && i < deleteCount; i++) {
    ret.push(walker.value)
    walker = this.removeNode(walker)
  }
  if (walker === null) {
    walker = this.tail
  }

  if (walker !== this.head && walker !== this.tail) {
    walker = walker.prev
  }

  for (var i = 0; i < nodes.length; i++) {
    walker = insert(this, walker, nodes[i])
  }
  return ret;
}

Yallist.prototype.reverse = function () {
  var head = this.head
  var tail = this.tail
  for (var walker = head; walker !== null; walker = walker.prev) {
    var p = walker.prev
    walker.prev = walker.next
    walker.next = p
  }
  this.head = tail
  this.tail = head
  return this
}

function insert (self, node, value) {
  var inserted = node === self.head ?
    new Node(value, null, node, self) :
    new Node(value, node, node.next, self)

  if (inserted.next === null) {
    self.tail = inserted
  }
  if (inserted.prev === null) {
    self.head = inserted
  }

  self.length++

  return inserted
}

function push (self, item) {
  self.tail = new Node(item, self.tail, null, self)
  if (!self.head) {
    self.head = self.tail
  }
  self.length++
}

function unshift (self, item) {
  self.head = new Node(item, null, self.head, self)
  if (!self.tail) {
    self.tail = self.head
  }
  self.length++
}

function Node (value, prev, next, list) {
  if (!(this instanceof Node)) {
    return new Node(value, prev, next, list)
  }

  this.list = list
  this.value = value

  if (prev) {
    prev.next = this
    this.prev = prev
  } else {
    this.prev = null
  }

  if (next) {
    next.prev = this
    this.next = next
  } else {
    this.next = null
  }
}

try {
  // add if support for Symbol.iterator is present
  __webpack_require__(/*! ./iterator.js */ "./node_modules/yallist/iterator.js")(Yallist)
} catch (er) {}


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,